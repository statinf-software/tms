/*
 *	TMS Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

include "nmp/config.nmp"
include "nmp/state.nmp"
include "nmp/macros.nmp"

// GLISS configuration
let proc = "tms"
let bit_order = "uppermost"
let gliss_isize = "16,32"
//let bit_image_order =  1

//OTAWA kind instruction types
let IS_COND    = 0x00001
let IS_CONTROL = 0x00002
let IS_CALL    = 0x00004
let IS_RETURN  = 0x00008
let IS_MEM     = 0x00010
let IS_LOAD    = 0x00020
let IS_STORE   = 0x00040
let IS_INT     = 0x00080
let IS_FLOAT   = 0x00100
let IS_ALU     = 0x00200
let IS_MUL     = 0x00400
let IS_DIV     = 0x00800
let IS_SHIFT   = 0x01000
let IS_TRAP    = 0x02000
let IS_INTERN  = 0x04000
let IS_MULTI   = 0x08000
let IS_SPECIAL = 0x10000
 
//shortcuts and aliases for the above instructions
let ARITH = IS_ALU | IS_INT  //"0"       // Integer Add and Sub Instructions
let MULDIV = IS_ALU | IS_INT //"1"     // Integer Mul and Div Instructions
let INTCMP = IS_ALU | IS_INT //"2"     // Integer Compare Instructions
let LOGIC = IS_ALU | IS_INT //"3"       // Integer Logical instructions
let SHIFTROT = IS_ALU | IS_SHIFT | IS_INT //"4" // Int shift and rotate
let STORE = IS_MEM | IS_STORE | IS_INT //"5"       // Integer Stores including byte reverse, multiple and string
let LOAD = IS_MEM | IS_LOAD | IS_INT //"6"         // Integer Loads including byte reverse, multiple and string
let MEMSYNC = IS_INTERN //"7"   // Memory Synchronization Instructions
let BRANCH = IS_CONTROL //"8" // IMPORTANT
let CRLI = IS_INTERN //"9"         // Condition Register Logical Instructions
let SYSTEM = IS_CONTROL | IS_TRAP //"10"     // System Linkage Instructions
let TRAP = IS_CONTROL | IS_TRAP //"11"
let EXT = IS_INTERN //"12"           // External Control Instructions
let CONTROL = IS_INTERN //"13"   // Processor Control Instructions
let CACHE = IS_INTERN //"14"       // Cache Management Instructions
let RETURN = IS_RETURN
let CALL = IS_CALL

mode ACC(acc_type: bit) = acc_type
	syntax = if acc_type == 0 then "AL" else "AH" endif
	image = format("%1b", acc_type)
	action = { }

mode COND(cond: card(4)) = cond
	num = cond
	syntax =
		switch(cond) {
			case 0b0000: "NEQ" // Not Equal To Z=0
			case 0b0001: "EQ" // Equal To Z=1
			case 0b0010: "GT" // Greater Than Z = 0 AND N = 0
			case 0b0011: "GEQ" // Greater Than or Equal To N=0
			case 0b0100: "LT" // Less Than N=1
			case 0b0101: "LEQ" // Less Than or Equal To Z = 1 OR N = 1
			case 0b0110: "HI" // Higher C = 1 AND Z = 0
			case 0b0111: "HIS, C" // Higher or Same, Carry Set C=1
			case 0b1000: "LO, NC" // Lower, Carry Clear C=0
			case 0b1001: "LOS" // Lower or Same C = 0 OR Z = 1
			case 0b1010: "NOV" // No Overflow V=0
			case 0b1011: "OV" // Overflow V=1
			case 0b1100: "NTC" // Test Bit Not Set TC = 0
			case 0b1101: "TC" // Test Bit Set TC = 1
			case 0b1110: "NBIO" // BIO Input Equal To Zero BIO = 0
			case 0b1111: "UNC" // Unconditional –
		}
	image = format("%4b", cond)
	action = { }

mode CNDF(cndf: card(4)) = cndf
	num = cndf
	syntax = 
		switch(cndf) { 
			case 0b0000: "NEQ" // Not Equal To Zero
			case 0b0001: "EQ" // Equal To Zero
			case 0b0010: "GT" // Greater Than Zero
			case 0b0011: "GEQ" // Greater Than or Equal To Zero
			case 0b0100: "LT" // Less Than Zero
			case 0b0101: "LEQ" // Less Than or Equal To Zero
			case 0b1010: "TF" // Test flag set
			case 0b1011: "NTF" // Test flag not set 
			case 0b1100: "LU" // Latched underflow 
			case 0b1101: "LV" // Latched overflow 
			case 0b1110: "UNC" // Unconditional 
			case 0b1111: "UNCF" // Unconditional with flag modification
			default: "" 
		}
	image = format("%4b", cndf)

mode RH(rh: card(3)) = rh
	num = rh
	syntax = format("R%dH", rh)
	image = format("%3b", rh)


// ASSUMES: AMODE = 0
// WARNING: has the following invalid cases: 0b10101000, 0b10101010, 0b10101101 (168, 170, 173)
// DOC: Table 5-1. Addressing Modes for “loc16” or “loc32”, page 81
mode LOC32(reg32: loc32index) = reg32
	num = reg32
	reg32ff = reg32<0..7> // flipped reg32
	syntax =
		// TODO: check bit order of constants
		switch(reg32ff<0..1>) {
			case 0b00:
				// UNTESTED
				format("@0x%x", reg32ff<2..7>)
			case 0b01:
				// UNTESTED
				format("*-SP[%d]", reg32ff<2..7>)
			case 0b11:
				// UNTESTED
				format("*+XAR%d[%d]", reg32ff<5..7>, reg32ff<2..4>)
			case 0b10:
				// UNTESTED
				if reg32ff<2..2> == 0 then // 0b100
					switch(reg32ff<3..4>) {
					case 0b00: format("*XAR%d++", reg32ff<5..7>)
					case 0b01: format("*--XAR%d", reg32ff<5..7>)
					case 0b10: format("*+XAR%d[AR0]", reg32ff<5..7>)
					case 0b11: format("*+XAR%d[AR1]", reg32ff<5..7>)
					}
				else // 0b101
					// UNTESTED except *SP++
					switch(reg32ff<3..4>) {
					case 0b11:
						switch(reg32ff<5..7>) {
						// Stack Addressing Modes (SP):
						case 0b101: "*SP++"
						case 0b110: "*--SP"
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b000: "*"
						case 0b001: "*++"
						case 0b010: "*--"
						case 0b011: "*0++"
						case 0b100: "*0--"
						// Circular Indirect Addressing Modes (XAR6, XAR1):
						case 0b111: "*AR6%%++"
						}
					case 0b10:
						// case 0b10110RRR: "*,ARP%d"
						format("*,ARP%d", reg32ff<5..7>)
					case 0b00:
						// loc32 stuff
						// case 0b10100AAA: "@XAR%d"
						format("XAR%d", reg32ff<5..7>)
					case 0b01:
						switch(reg32ff<5..7>) {
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b110: "*BR0++"
						case 0b111: "*BR0--"
						case 0b001: "ACC"
						case 0b011: "P"
						case 0b100: "XT"
						default:
							// case 0b000, 0b010, 0b101
							"<invalid>"
						}
					}
				endif
		}
	image = format("%8b", reg32)
// ASSUMES: AMODE = 0
// WARNING: this version does not include invalid cases
// DOC: Table 5-1. Addressing Modes for “loc16” or “loc32”, page 81
mode LOC32_CHECKED(reg32: loc32enum) = reg32
	num = reg32
	reg32ff = reg32<0..7> // flipped reg32
	syntax =
		// TODO: check bit order of constants
		switch(reg32ff<0..1>) {
			case 0b00:
				// UNTESTED
				format("@0x%x", reg32ff<2..7>)
			case 0b01:
				// UNTESTED
				format("*-SP[%d]", reg32ff<2..7>)
			case 0b11:
				// UNTESTED
				format("*+XAR%d[%d]", reg32ff<5..7>, reg32ff<2..4>)
			case 0b10:
				// UNTESTED
				if reg32ff<2..2> == 0 then // 0b100
					switch(reg32ff<3..4>) {
					case 0b00: format("*XAR%d++", reg32ff<5..7>)
					case 0b01: format("*--XAR%d", reg32ff<5..7>)
					case 0b10: format("*+XAR%d[AR0]", reg32ff<5..7>)
					case 0b11: format("*+XAR%d[AR1]", reg32ff<5..7>)
					}
				else // 0b101
					// UNTESTED except *SP++
					switch(reg32ff<3..4>) {
					case 0b11:
						switch(reg32ff<5..7>) {
						// Stack Addressing Modes (SP):
						case 0b101: "*SP++"
						case 0b110: "*--SP"
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b000: "*"
						case 0b001: "*++"
						case 0b010: "*--"
						case 0b011: "*0++"
						case 0b100: "*0--"
						// Circular Indirect Addressing Modes (XAR6, XAR1):
						case 0b111: "*AR6%%++"
						}
					case 0b10:
						// case 0b10110RRR: "*,ARP%d"
						format("*,ARP%d", reg32ff<5..7>)
					case 0b00:
						// loc32 stuff
						// case 0b10100AAA: "@XAR%d"
						format("XAR%d", reg32ff<5..7>)
					case 0b01:
						switch(reg32ff<5..7>) {
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b110: "*BR0++"
						case 0b111: "*BR0--"
						case 0b001: "ACC"
						case 0b011: "P"
						case 0b100: "XT"
						default:
							// case 0b000, 0b010, 0b101
							"<invalid>"
						}
					}
				endif
		}
	image = format("%8b", reg32)


// ASSUMES: AMODE = 0
// DOC: Table 5-1. Addressing Modes for “loc16” or “loc32”, page 81
mode LOC16(reg16: loc16index) = reg16
	num = reg16
	reg16ff = reg16<0..7> // flipped reg16
	syntax =
		// TODO: check bit order of constants
		switch(reg16ff<0..1>) {
			case 0b00:
				// UNTESTED
				format("@0x%x", reg16ff<2..7>)
			case 0b01:
				// UNTESTED
				format("*-SP[%d]", reg16ff<2..7>)
			case 0b11:
				// UNTESTED
				format("*+XAR%d[%d]", reg16ff<5..7>, reg16ff<2..4>)
			case 0b10:
				// UNTESTED
				if reg16ff<2..2> == 0 then // 0b100
					switch(reg16ff<3..4>) {
					case 0b00: format("*XAR%d++", reg16ff<5..7>)
					case 0b01: format("*--XAR%d", reg16ff<5..7>)
					case 0b10: format("*+XAR%d[AR0]", reg16ff<5..7>)
					case 0b11: format("*+XAR%d[AR1]", reg16ff<5..7>)
					}
				else // 0b101
					// UNTESTED
					switch(reg16ff<3..4>) {
					case 0b11:
						switch(reg16ff<5..7>) {
						// Stack Addressing Modes (SP):
						case 0b101: "*SP++"
						case 0b110: "*--SP"
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b000: "*"
						case 0b001: "*++"
						case 0b010: "*--"
						case 0b011: "*0++"
						case 0b100: "*0--"
						// Circular Indirect Addressing Modes (XAR6, XAR1):
						case 0b111: "*AR6%%++"
						}
					case 0b10:
						// case 0b10110RRR: "*,ARP%d"
						format("*,ARP%d", reg16ff<5..7>)
					case 0b00:
						// loc16 stuff
						// case 0b10100AAA: "AR%d"
						format("AR%d", reg16ff<5..7>)
					case 0b01:
						switch(reg16ff<5..7>) {
						// C2xLP Indirect Addressing Modes (ARP, XAR0 to XAR7):
						case 0b110: "*BR0++"
						case 0b111: "*BR0--"
						// 16-Bit Register Addressing Modes (AR0 to AR7, AH, AL, PH, PL, TH, SP):
						case 0b000: "AH"
						case 0b001: "AL"
						case 0b010: "PH"
						case 0b011: "PL"
						case 0b100: "TH"
						case 0b101: "SP"
						}
					}
				endif
		}
	image = format("%8b", reg16)

macro setR(d, v) = if d != 0 then R[d] = v; endif 

// mode IMM16(n: half) = n
// 	syntax = format("#%d", n)
// 	image = format("%16b", n)

// mode UIMM16(n: uhalf) = n
//    syntax = format ( "#%d", n )
//    image  = format ( "%16b", n )

// top-level instructions
op instruction (x: allinstr)
	syntax = x.syntax
	image = x.image
	action = {
		NPC = PC + 4;
		x.action;
		PC = NPC;
	}

// op allinstr =
// 	  all_movl
// 	| all_other

op init ()
	action = {
		R[0] = 0;
	}

include "nmp/all.nmp"
include "tms_list.nmp"
