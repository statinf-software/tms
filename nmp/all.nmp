/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// DOC: page 135
op addb_AX(ax: ACC, imm: int(8))
	syntax = format("ADDB %s, #%d", ax, imm)
	image = format("1001 110%s %8b", ax, imm)
    action = { } // AX = AX + S:8bit;


// DOC: page 137
op addb_XARn(xarn: card(3), imm: card(7))
	syntax = format("ADDB XAR%d, #%d", xarn, imm)
	image = format("1101 1%3b 0%7b", xarn, imm)
	action = { } // XARn = XARn + 0:7bit;


// DOC: page 180
op cmpb(ax: ACC, imm: card(8))
    syntax = format("CMPB %s, #0x%x", ax, imm)
    image = format("0101 001%s %8b", ax, imm)
    action = {
    	//Set Flags On (AX − 0:8bit);
    }

// DOC: page 181
op cmpl_ACC_loc32(src: LOC32)
	syntax = format("CMPL ACC, %s", src.syntax)
	image = format("0000 1111 %s", src.image)
	action = { } //Modify flags on (ACC - [loc32]);

// DOC: page 220
op lcr(imm: card(22))
	syntax = format("LCR 0x%06x", imm)
	image = format("0111 0110 01 %22b", imm)
	action = {
		// [SP] = RPC(15:0);
		// SP = SP + 1;
		// [SP] = RPC(21:16);
		// SP = SP + 1;
		// RPC = PC + 2;
		// PC = 22bit;
		M16[SP] = RPC<15..0>;
		SP = SP + 1;
		M[SP] = RPC<21..16>;
		SP = SP + 1;
		RPC = PC + 2;
		PC = imm;
	}

// DOC: page 229
op lretr()
	syntax = "LRETR"
	image = "0000 0000 0000 0110"
	action = {
		// UNTESTED
		PC = RPC;
		SP = SP - 1;
		TMP<31..16> = M16[SP];
		SP = SP - 1;
		TMP<15..0> = M16[SP];
		RPC = TMP<21..0>;
	}

// DOC: page 237
op lsr_AX(ax: ACC, shift: card(4))
	syntax = format("LSR %s, %d", ax, shift+1)
	image = format("1111 1111 110%s %4b", ax, shift)
	action = { } //

// DOC: page 252
op mov_16bit_loc16(imm: card(16), src: LOC16)
	syntax = format("MOV @0x%x, %s", imm, src)
	image = format("1111 0100 %s %16b", src, imm)
	action = {
		// [0x0000:16bit] = [loc16];
	}

// DOC: page 257
op mov_AX(ax: ACC, src: LOC16)
	syntax = format("MOV %s, %s", ax, src)
	image = format("1001 001%s %s", ax, src)
	action = { } // AX = [loc16];

// DOC: page 262
op mov_loc16_0(dest: LOC16)
	syntax = format("MOV %s, #0", dest.syntax)
	image = format("0010 1011 %s", dest.image)
	action = {
		// [loc16] = 0x0000;
	}

// DOC: page 264
op mov_loc16_ARn(arn: card(3), dest:LOC16)
	syntax = format("MOV %s, AR%d", dest, arn)
	image = format("0111 1%3b %s", arn, dest)
	action = { } // [loc16] = ARn;

// DOC: page 265
op mov_loc16_AX(dest: LOC16, ax: ACC)
	syntax = format("MOV %s, %s", dest, ax)
	image = format("1001 011%s %8b", ax, dest)
	action = { } // [loc16] = AX;

// DOC: page 273
op mov_ph_loc16(src: LOC16)
	syntax = format("MOV PH, %s", src.syntax)
	image = format("0010 1111 %s", src.image)
	action = {
		// PH = [loc16];
	}

// DOC: page 281
op movb_ACC(imm: card(8))
	syntax = format("MOVB ACC, #%d", imm)
	image = format("0000 0010 %8b", imm)
	action = { } // ACC = 0:8bit;

// DOC: page 283
op movb_AX(ax: ACC, imm: card(8))
	syntax = format("MOVB %s, #0x%x", ax, imm)
	image = format("1001 101%s %8b", ax, imm)
	action = { } // AX = 0:8bit;

// DOC: page 294
op movb_XAR6(imm: card(8))
	syntax = format("MOVB XAR6, #0x%02x", imm)
	image = format("1011 1110 %8b", imm)
	action = { } //XAR6 = 0:8bit;
// DOC: page 294
op movb_XAR7(imm: card(8))
	syntax = format("MOVB XAR7, #0x%02x", imm)
	image = format("1011 0110 %8b", imm)
	action = { } //XAR7 = 0:8bit;

// PUSH XARn is aliased here
// DOC: page 304, 382
macro MakeMovlLoc32Xarn(xarn, fmt) = \
	syntax = format("MOVL %s, %s", dest.syntax, xarn) \
	image = format(fmt, dest.image)\
	action = { } // [loc32] = XARn;
op movl_loc32_XAR0(dest: LOC32) MakeMovlLoc32Xarn("XAR0", "0011 1010 %s")
op movl_loc32_XAR1(dest: LOC32) MakeMovlLoc32Xarn("XAR1", "1011 0010 %s")
op movl_loc32_XAR2(dest: LOC32) MakeMovlLoc32Xarn("XAR2", "1010 1010 %s")
op movl_loc32_XAR3(dest: LOC32) MakeMovlLoc32Xarn("XAR3", "1010 0010 %s")
op movl_loc32_XAR4(dest: LOC32) MakeMovlLoc32Xarn("XAR4", "1010 1000 %s")
op movl_loc32_XAR5(dest: LOC32) MakeMovlLoc32Xarn("XAR5", "1010 0000 %s")
op movl_loc32_XAR6(dest: LOC32) MakeMovlLoc32Xarn("XAR6", "1100 0010 %s")
op movl_loc32_XAR7(dest: LOC32) MakeMovlLoc32Xarn("XAR7", "1100 0011 %s")

// DOC: page 316
op movw(imm: card(16))
	syntax = format("MOVW DP, #0x%x", imm)
	image = format("0111 0110 0001 1111 %16b", imm)
	action = {
		//DP<15..0> = imm;
	}

// DOC: page 309
macro MakeMovlXarn22bit(xarn, fmt) = \
	syntax = format("MOVL %s, #0x%06x", xarn, imm)\
	image = format(fmt, imm)\
	action = { } // XARn = 0:22bit;
op movl_XAR0_22bit(imm: card(22)) MakeMovlXarn22bit("XAR0", "1000 1101 00 %22b")
op movl_XAR1_22bit(imm: card(22)) MakeMovlXarn22bit("XAR1", "1000 1101 01 %22b")
op movl_XAR2_22bit(imm: card(22)) MakeMovlXarn22bit("XAR2", "1000 1101 10 %22b")
op movl_XAR3_22bit(imm: card(22)) MakeMovlXarn22bit("XAR3", "1000 1101 11 %22b")
op movl_XAR4_22bit(imm: card(22)) MakeMovlXarn22bit("XAR4", "1000 1111 00 %22b")
op movl_XAR5_22bit(imm: card(22)) MakeMovlXarn22bit("XAR5", "1000 1111 01 %22b")
op movl_XAR6_22bit(imm: card(22)) MakeMovlXarn22bit("XAR6", "0111 0110 10 %22b")
op movl_XAR7_22bit(imm: card(22)) MakeMovlXarn22bit("XAR7", "0111 0110 11 %22b")

// DOC: page 256, 318
op mov_AR_loc16__movz_ARn_0to5(xarn: card(3), addr: LOC16)
	syntax = 
		if xarn == 0b110 then 
			format("MOV AR6, %s", addr)
		else if xarn == 0b111 then 
				format("MOV AR7, %s", addr)
			else 
				format("MOVZ AR%d, %s", xarn, addr)
			endif
		endif
	image = format("0101 1%3b %s", xarn, addr)
	action = { 

	}

op movz_AR6(src: LOC16)
	syntax = format("MOVZ AR6, %s", src)
	image = format("1000 1000 %s", src)
	action = { } // AR6 = [loc16]; AR6H = 0;
op movz_AR7(src: LOC16)
	syntax = format("MOVZ AR7, %s", src)
	image = format("1000 0000 %s", src)
	action = { } // AR7 = [loc16]; AR7H = 0;

// DOC: page 339
op nop(arpn: LOC32)
	syntax =
		if arpn == 0x00 then // simple NOP
			"NOP"
		else
			// UNTESTED
			format("NOP %s", arpn)
	endif
	image = format("0111 0111 %s", arpn)
	action = {
		// Modify the indirect address operand as specified and change the auxiliary register pointer (ARP) to the given auxiliary register.
		// If no operands are given, then do nothing.
	}	

// DOC: page 399
op sb(offset: int(8), cond: COND)
	syntax = format("SB %d, %s", offset, cond.syntax)
	image = format("0110 %s %8b", cond.image, offset)
	action = {
		// If (COND = true) PC = PC + signed 8-bit offset;
		// If (COND = false) PC = PC + 1;
	}

// DOC: page 420
op subb_ACC(src: card(8))
	syntax = format("SUBB ACC, #%d", src)
	image = format("0001 1001 %8b", src)
	action = { } //ACC = ACC - 0:8bit;

// DOC: page 422. catches dc02, ADDB must be implemented
op subb_XARn(xarn: card(3), imm: card(7))
	syntax = format("SUBB XAR%d, #%d", xarn, imm)
	image = format("1101 1%3b 1 %7b", xarn, imm)
	action = { } // XARn = XARn − 0:7bit;
	
// DOC: page 433
op subu(src: LOC16)
	syntax = format("SUBU ACC, %s", src)
	image = format("0000 0001 %s", src)
	action = { } //ACC = ACC − 0:[loc16];




/////// UNTESTED INSTRUCTIONS /////////

// DOC: page 124
op aborti()
    syntax = "ABORTI"
    image = "0000 0000 0000 0001"
    action = {

    }

// DOC: page 125
op abs_ACC()
    syntax = "ABS ACC"
    image = "1111 1111 0101 0110"
    action = {

    }

// DOC: page 126
op abstc_ACC()
    syntax = "ABSTC ACC"
    image = "0101 0110 0101 1111"
    action = {

    }


// DOC: page 128
op add_ACC_16bit(imm: card(16), shift: card(4))
    syntax = if shift == 0b0000 then format("ADD ACC, #%d", imm)
        else format("ADD ACC, #%d << #%d", imm, shift) endif
    image = format("1111 1111 0001 %4b %16b", shift, imm)
    action = {

    }

// DOC: page 129
op add_ACC_loc16(src: LOC16)
   syntax = format("ADD ACC, %s << T", src)
   image = format("0101 0110 0010 0011 0000 0000 %s", src)
   action = {

   }

// DOC: page 130
op add_acc_loc16_0(src: LOC16)
   syntax = format("ADD ACC, %s", src)
   image = format("1000 0001 %s", src)
   action = {

   }
op add_acc_loc16_shift(src: LOC16, shift: card(4))
   syntax = format("ADD ACC, %s << #%d", src, shift)
   image = format("0101 0110 0000 0100 0000 %4b %s", shift, src)
   action = {

   }
op add_acc_loc16_shift16(src: LOC16)
   syntax = format("ADD ACC, %s << #16", src)
   image = format("0000 0101 %s", src)
   action = {

   }
// UNIMPLEMENTED: OBJMODE 0 instruction
// op add_acc_loc16_0to15(src: LOC16, shift: card(4))
//    syntax = format("ADD ACC, %s << %d", src, shift)
//    image = format("1010 %4b %s", shift, src)
//    action = {

//    }

// DOC: page 131
op add_AX_loc16(ax: ACC, src: LOC16)
    syntax = format("ADD %s, %s", ax, src)
    image = format("1001 010%s %s", ax, src)
    action = {

    }

// DOC: page 132
op add_loc16_AX(ax: ACC, dest: LOC16)
    syntax = format("ADD %s, %s", dest, ax)
    image = format("0111 001%s %s", ax, dest)
    action = {

    }

// DOC: page 133
op add_loc16_signed(dest: LOC16, imm: int(16))
    syntax = format("ADD %s, #%d", dest, imm)
    image = format("0000 1000 %s %16b", dest, imm)
    action = {

    }

// DOC: page 134
op addb_ACC(imm: card(8))
    syntax = format("ADDB ACC, #%d", imm)
    image = format("0000 1001 %8b", imm)
    action = {
    	// ACC = ACC + 0:8bit;
    }

// DOC: page 136
op addb_SP(imm: card(7))
    syntax = format("ADDB SP, #%d", imm)
    image = format("1111 1110 0%7b", imm)
    action = {
    	// SP = SP + 0:7bit;
    }

// DOC: page 138
op addcl_ACC_loc32(src: LOC32)
    syntax = format("ADDCL ACC, %s", src)
    image = format("0101 0110 0100 0000 xxxx xxxx %s", src)
    action = {
        // ACC = ACC + [loc32] + C;
    }

// DOC: page 139
op addcu_ACC_loc16(src: LOC16)
    syntax = format("ADDCU ACC, %s", src)
    image = format("0000 1100 %s", src)
    action = {
    	// ACC = ACC + 0:[loc16] + C;
    }

// DOC: page 140
op addl_ACC_loc32(src: LOC32)
    syntax = format("ADDL ACC, %s", src)
    image = format("0000 0111 %s", src)
    action = {
    	//ACC = ACC + [loc32];
    }

// DOC: page 141
// SEE: page 279

// DOC: page 142
op addl_loc32_ACC(dest: LOC32)
    syntax = format("ADDL %s, ACC", dest)
    image = format("0101 0110 0000 0001 0000 0000 %s", dest)
    action = {
    	//[loc32] = [loc32] + ACC;
    }

// DOC: page 143
op addu_ACC_loc16(src: LOC16)
    syntax = format("ADDU ACC, %s", src)
    image = format("0000 1101 %s", src)
    action = {
    	// ACC = ACC + 0:[loc16];
    }

// DOC: page 144
op addul_P_loc32(src: LOC32)
    syntax = format("ADDUL P, %s", src)
    image = format("0101 0110 0101 0111 0000 0000 %s", src)
    action = {
    	//P = P + [loc32]; unsigned add
    }

// DOC: page 145
op addul_ACC_loc32(src: LOC32)
  syntax = format("ADDUL ACC, %s", src)
   image = format("0101 0110 0101 0011 xxxx xxxx %s", src)
   action = {

   }

// DOC: page 146
op adrk(imm: card(8))
    syntax = format("ADRK #%d", imm)
    image = format("1111 1100 %8b", imm)
    action = {
    	//XAR(ARP) = XAR(ARP) + 0:8bit;
    }

// DOC: page 147
op and_ACC_16bit(shift: card(4), imm: card(16))
   syntax = 
        if shift then format("AND ACC, #%d << #%d", imm, shift)
        else format ("AND ACC, #%d", imm) endif
   image = format("0011 1110 0000 %4b %16b", shift, imm)
   action = {

   }
op and_ACC_16bit_16shift(imm: card(16))
   syntax = format("AND ACC, #%d << #16", imm)
   image = format("0101 0110 0000 1000 %16b", imm)
   action = {

   }

// DOC: page 148
op and_ACC_loc16(loc: LOC16)
    syntax = format("AND ACC, %s", loc)
    image = format("1000 1001 %s", loc)
    action = {
    	//ACC = ACC AND 0:[loc16];
    }

// DOC: page 149
op and_AX_loc16_16bit(ax: ACC, loc: LOC16, imm: card(16))
    syntax = format("AND %s, %s, #0x%x", ax, loc, imm)
    image = format("1100 110%s %s %16b", ax, loc, imm)
    action = {
    	//AX = [loc16] AND 16bit;
    }

// DOC: page 150
op and_IER(imm: card(16))
    syntax = format("AND IER, #%d", imm)
    image = format("0111 0110 0010 0110 %16b", imm)
    action = {
    	//IER = IER AND #16bit;
    }

// DOC: page 151
op and_IFR(imm: card(16))
    syntax = format("AND IFR, #%d", imm)
    image = format("0111 0110 0010 1111 %16b", imm)
    action = {
    	//IFR = IFR AND #16bit;
    }

// DOC: page 152
op and_loc16_AX(ax: ACC, dest: LOC16)
    syntax = format("AND %s, %s", dest, ax)
    image = format("1100 000%s %s", ax, dest)
    action = {
    	//[loc16] = [loc16] AND AX;
    }

// DOC: page 153
op and_AX_loc16(ax: ACC, src: LOC16)
    syntax = format("AND %s, %s", ax, src)
    image = format("1100 111%s %s", ax, src)
    action = {
    	//AX = AX AND 16bit;
    }

// DOC: page 154
op and_loc16_16bitsigned(src: LOC16, imm: int(16))
    syntax = format("AND %s, #0x%x", src, imm)
    image = format("0001 1000 %s %16b", src, imm)
    action = {
    	//[loc16] = [loc16] AND 16bit;
    }

// DOC: page 155
op andb_AX(ax: ACC, imm: card(8))
    syntax = format("ANDB %s, #0x%x", ax, imm)
    image = format("1001 000%s %8b", ax, imm)
    action = {
    	//AX = AX AND 0:8bit;
    }

// DOC: page 156
op asp()
    syntax = "ASP"
    image = "0111 0110 0001 1011"
    action = {

    }

// DOC: page 157
op asr_ax(ax: ACC, shift: card(4))
    syntax = format("ASR %s, %d", ax, shift+1)
    image = format("1111 1111 101%s %4b", ax, shift)
    action = {

    }

// DOC: page 158
op asr_ax_t(ax: ACC)
    syntax = format("ASR %s, T", ax)
    image = format("1111 1111 0110 010%s", ax)
    action = {

    }

// DOC: page 159
op asr_acc(shift: card(4))
    syntax = format("ASR64        ACC:P,#%d", shift+1)
    image = format("0101 0110 1000 %4b", shift)
    action = {

    }

// DOC: page 160
op asr_acc_t()
    syntax = "ASR64        ACC:P, T"
    image = "0101 0110 0010 1100"
    action = {

    }

// DOC: page 161
op asrl_acc_t()
    syntax = "ASRL ACC, T"
    image = "0101 0110 0001 0000"
    action = {

    }

// DOC: page 162
op b(offset: int(16), cond: COND)
   syntax = format("B %d, %s", offset, cond)
   image = format("1111 1111 1110 %s %16b", cond, offset)
   // otawa_kind = BRANCH
   // otawa_target = __IADDR + offset
   action = {
        // If (COND = true) PC = PC + signed 16-bit offset;
        // If (COND = false) PC = PC + 2;
   }

// DOC: page 163
op banz(offset: int(16), arn: card(3)) 
    syntax = format("BANZ %d,AR%d--", offset, arn)
    image = format("0000 0000 0000 1%3b %16b", arn, offset)
    // otawa_kind = BRANCH
    // otawa_target = __IADDR + (offset << 1)
    action = {

    }

// DOC: page 164
op bar(offset: int(16), arn: card(3), arm: card(3), eq: bit)
	eq_type = if eq == 0 then "EQ" else "NEQ" endif
    syntax = format("BAR %d, AR%d, AR%d, %s", offset, arn, arm, eq_type)
    image = format("1000 1111 1%1b %3b %3b %16b", eq, arn, arm, offset)
    // otawa_kind = BRANCH
    // otawa_target = __IADDR + offset
    action = {
    	//If (tested condition = true) PC = PC + signed 16-bit offset;
		//If (tested condition = false) PC = PC + 2;
    }

// DOC: page 165
op bf(cond: COND, offset: int(16))
   syntax = format("BF %d, %s", offset, cond)
   image = format("0101 0110 1100 %s %16b", cond, offset)
   // otawa_kind = BRANCH
   // otawa_target = __IADDR + offset
   action = {

   }

// DOC: page 166
// ALIAS: page 172
//op c27map()
//    syntax = "C27MAP"
//    image = "0101 0110 0011 1111"
//    action = {

//    }

// DOC: page 167
// ALIAS: page 174
//op c27obj()
//    syntax = "C27OBJ"
//    image = "0101 0110 0011 0110"
//    action = {

//    }

// DOC: page 168
//broken, see page 171 CLRC AMODE
//op c28addr()
//    syntax = "C28ADDR"
//    image = "0101 0110 0001 0110"
//    action = {

//    }

// DOC: page 169
// ALIAS: page 405
//op c28map()
//    syntax = "C28MAP"
//    image = "0101 0110 0001 1010"
//    action = {

//    }

// DOC: page 170
// ALIAS: page 406
// op c28obj()
//     syntax = "C28OBJ"
//     image = "0101 0110 0001 1111"
//     action = {

//     }

// DOC: page 171
op clrc_amode()
    syntax = "CLRC AMODE"
    image = "0101 0110 0001 0110"
    action = {

    }

// DOC: page 172
op clrc_m0m1map()
    syntax = "CLRC M0M1MAP"
    image = "0101 0110 0011 1111"
    action = {

    }

// DOC: page 173
op clrc_objmode()
    syntax = "CLRC OBJMODE"
    image = "0101 0110 0011 0110"
    action = {

    }

// DOC: page 174
op clrc_ovc()
    syntax = "CLRC OVC"
    image = "0101 0110 0101 1100"
    action = {

    }

// DOC: page 175
op clrc_xf()
    syntax = "CLRC XF"
    image = "0101 0110 0001 1011"
    action = {

    }

// EINT is aliased to here
// DOC: page 176, 192 
op clrc_mode(mode_bitset: card(8))
    _m = mode_bitset
    syntax = format("CLRC %s%s%s%s%s%s%s%s",
        if _m<0..0> then format("SXM%s",  if _m<1..7>  then ", " else "" endif) else "" endif,
        if _m<1..1> then format("OVM%s",  if _m<2..7>  then ", " else "" endif) else "" endif,
        if _m<2..2> then format("TC%s",   if _m<3..7>  then ", " else "" endif) else "" endif,
        if _m<3..3> then format("C%s",    if _m<4..7>  then ", " else "" endif) else "" endif,
        if _m<4..4> then format("INTM%s", if _m<5..7>  then ", " else "" endif) else "" endif,
        if _m<5..5> then format("DBGM%s", if _m<6..7>  then ", " else "" endif) else "" endif,
        if _m<6..6> then format("PAGE0%s",if _m<7..7>  then ", " else "" endif) else "" endif,
        if _m<7..7> then "VMAP" else "" endif)
    image = format("0010 1001 %8b", mode_bitset)
    action = {
        // Clear the specified status bits.
    }

// DOC: page 177
op cmp_ax(ax: ACC, loc: LOC16)
    syntax = format("CMP %s, %s", ax, loc)
    image = format("0101 010%s %s", ax, loc)
    action = {
    	//Set Flags On (AX − [loc16]);
    }

// DOC: page 178
op cmp_loc16(loc: LOC16, imm: int(16))
    syntax = format("CMP %s, #%d", loc, imm)
    image = format("0001 1011 %s %16b", loc, imm)
    action = {
    	//Modify flags on ([loc16] − 16bitSigned);
    }

// DOC: page 179
op cmp64_acc_p()
    syntax = "CMP64 ACC:P"
    image = "0101 0110 0101 1110"
    action = {

    }

// DOC: page 182
op cmpl_ACC_p()
    syntax = "CMPL ACC, P << PM"
    image = "1111 1111 0101 1001"
    action = {
    	//Modify flags on (ACC − [P << PM]);
    }

// DOC: page 183
op cmpr0()
    syntax = "CMPR 0"
    image = "0101 0110 0001 1101"
    action = {
        // CMPR 0: if(AR0 = AR[ARP]) TC = 1, else TC = 0
    }
op cmpr1()
    syntax = "CMPR 1"
    image = "0101 0110 0001 1001"
    action = {
        // CMPR 1: if(AR0 > AR[ARP]) TC = 1, else TC = 0
    }
op cmpr2()
    syntax = "CMPR 2"
    image = "0101 0110 0001 1000"
    action = {
        // CMPR 2: if(AR0 > AR[ARP]) TC = 1, else TC = 0
    }
op cmpr3()
    syntax = "CMPR 3"
    image = "0101 0110 0001 1100"
    action = {
        // CMPR 3: if(AR0 != AR[ARP]) TC = 1, else TC = 0
    }

// DOC: page 184
op csb()
    syntax = "CSB ACC"
    image = "0101 0110 0011 0101"
    action = {

    }

// DOC: page 185
op dec(loc: LOC16)
    syntax = format("DEC %s", loc)
    image = format("0000 1011 %s", loc)
    action = {

    }

// DOC: page 186
// SEE: page 403

// DOC: page 187
op dmac(dmactype: bit, dmacmode: LOC32)
	pp = if dmactype == 0 then "*XAR7++" else "*XAR7" endif
    syntax = format("DMAC ACC:P, %s, %s", dmacmode, pp)
    image = format("0101 0110 0100 1011 1%1b00 0111 %8b", dmactype, dmacmode)
    action = {

    }

// DOC: page 189
op dmov(src: LOC16)
    syntax = format("DMOV %s", src)
    image = format("1010 0101 %s", src)
    action = {
		// loc16 + 1] = [loc16];
    }

// DOC: page 190
op eallow()
    syntax = "EALLOW"
    image = "0111 0110 0010 0010"
    action = {

    }

// DOC: page 191
op edis()
    syntax = "EDIS"
    image = "0111 0110 0001 1010"
    action = {

    }

// DOC: page 192
// SEE: page 176
// op eint()
//     syntax = "EINT"
//     image = "0010 1001 0001 0000"
//     action = {

//     }

// DOC: page 193
op estop0()
    syntax = "ESTOP0"
    image = "0111 0110 0010 0101"
    action = {

    }

// DOC: page 194
op estop1()
    syntax = "ESTOP1"
    image = "0111 0110 0010 0100"
    action = {

    }

// DOC: page 195
op ffc(addr: card(22))
    syntax = format("FFC XAR7, %d", addr)
    image = format ("0000 0000 11%22b", addr)
    // otawa_kind = CALL
    action = {
    	//XAR7(21:0) = PC + 2;
		//XAR7(31:22) = 0;
		//PC = 22 bit;
    }

// DOC: page 196
op flip(ax: ACC)
    syntax = format("FLIP %s", ax)
    image = format("0101 0110 0111 000%s", ax)
    action = {

    }

// DOC: page 197
op iack(imm: card(16))
    syntax = format("IACK #%d", imm)
    image = format("0111 0110 0011 1111 %16b", imm)
    action = {
    	//data_bus(15:0) = 16bit;
    }

// DOC: page 198
op idle()
    syntax = "IDLE"
    image = "0111 0110 0010 0001"
    action = {

    }

// DOC: page 199
op imacl(imacmode: LOC32, imactype: bit)
	pp = if imactype == 0 then "*XAR7++" else "*XAR7" endif
    syntax = format("IMACL P, %s, %s", imacmode, pp)
    image = format("0101 0110 0100 1101 1%1b00 0111 %8b", imactype, imacmode)
    action = {

    }

// DOC: page 201
op impyal(loc: LOC32)
    syntax = format("IMPYAL P, XT, %s", loc)
    image = format("0101 0110 0100 1100 0000 0000 %8b", loc)
    action = {

    }

// DOC: page 203
op impyl_acc(loc: LOC32)
    syntax = format("IMPYL ACC, XT, %s", loc)
    image = format("0101 0110 0100 0100 0000 0000 %s", loc)
    action = {
    	//ACC = signed XT * signed [loc32];
    }

// DOC: page 204
op impyl_p(loc: LOC32)
    syntax = format("IMPYL P, XT, %s", loc)
    image = format("0101 0110 0000 0101 0000 0000 %s", loc)
    action = {

    }

// DOC: page 205
op impysl(loc: LOC32)
    syntax = format("IMPYSL P, XT, %s", loc)
    image = format("0101 0110 0100 0011 0000 0000 %s", loc)
    action = {
    	
    }

// DOC: page 207
op impyxul(loc: LOC32)
    syntax = format("IMPYXUL P, XT, %s", loc)
    image = format("0101 0110 0110 0101 0000 0000 %s", loc)
    action = {

    }

// DOC: page 209
op in_loc16(addr: LOC16, port: card(16))
  syntax = format("IN %s, *(%d)", addr, port)
  image = format("1011 0100 %s %16b", addr, port)
  action = {

  }

// DOC: page 211
op inc(loc: LOC16)
    syntax = format("INC %s", loc)
    image = format("0000 1010 %s", loc)
    action = {
    	//ACC = ACC + 0:[loc16];
    }

// DOC: page 212
op intr(intx: card(4))
    intr_vector = switch(intx) {
        case 0: "RESET"
        case 15: "<invalid>"
        default: format("INT%d", intx)
    }
    syntax = format("INTR %s", intr_vector)
    image = format("0000 0000 0001 %4b", intx)
    action = { }
// DOC: page 212
op intr_nmi()
    syntax = "INTR NMI"
    image = "0111 0110 0001 0110"
    action = { }
// DOC: page 212
op intr_emuint()
    syntax = "INTR EMUINT"
    image = "0111 0110 0001 1100"
    action = { }

// DOC: page 214
op iret()
    syntax = "IRET"
    image = "0111 0110 0000 0010"
    otawa_kind = RETURN
    action = {

    }

// DOC: page 216
op lb_xar7()
    syntax = "LB *XAR7"
    image = "0111 0110 0010 0000"
    // otawa_kind = BRANCH
    action = {
    	//PC = XAR7(21:0);
    }

// DOC: page 217
op lb_22bit(addr: card(22))
    syntax = format("LB 0x%6x", addr)
    image = format("0000 0000 01%22b", addr)
    // otawa_kind = BRANCH
    action = {

    }

// DOC: page 218
op lc_xar7()
    syntax = "LC *XAR7"
    image = "0111 0110 0000 0100"
    // otawa_kind = CALL
    action = {

    }

// DOC: page 221
op lcr_xarn(xarn: card(3))
	syntax = format("LCR *XAR%d", xarn)
	image = format("0011 1110 0110 0%3b", xarn)
    // otawa_kind = CALL
	action = { 
		//
	}

// DOC: page 222
op loopnz(addr: LOC16, imm: card(16))
	syntax = format("LOOPNZ %s, %d", addr, imm)
	image = format("0010 1110 %s %16b", addr, imm) 
    // otawa_kind = BRANCH
	action = { 
		//while([loc16] & 16bit != 0);
	}

// DOC: page 224
op loopz(addr: LOC16, imm: card(16))
	syntax = format("LOOPZ %s, %d", addr, imm)
	image = format("0010 1100 %s %16b", addr, imm)
    // otawa_kind = BRANCH
	action = { 
		//while([loc16] & 16bit = 0);
	}

// DOC: page 226
op lpaddr()
	syntax = "LPADDR"
	image = "0101 0110 0001 1110" 
	action = { 
		//
	}
// DOC: page 227
op lret()
	syntax = "LRET"
	image = "0111 0110 0001 0100" 
    otawa_kind = RETURN
	action = { 
		//
	}
// DOC: page 228
op lrete()
	syntax = "LRETE"
	image = "0111 0110 0001 0000" 
    otawa_kind = RETURN
	action = { 
		//
	}

// DOC: page 230
op lsl_ACC(shift: card(4))
	syntax = format("LSL ACC, %d", shift+1)
	image = format("1111 1111 0011 %4b", shift)
	action = {
		//
	}
// DOC: page 231
op lsl_ACC_T()
	syntax = "LSL ACC, T"
	image = "1111 1111 0101 0000"
	action = {
		//
	}
// DOC: page 232
op lsl_AX(ax: ACC, shift: card(4))
	syntax = format("LSL %s, %d", ax, shift+1)
	image = format("1111 1111 100%s %4b", ax, shift)
	action = {
		//
	}
// DOC: page 233
op lsl_AX_T(ax: ACC)
	syntax = format("LSL %s, T", ax)
	image = format("1111 1111 0110 011%s", ax)
	action = {
		//
	}
// DOC: page 234
op lsl64_ACC(shift: card(4))
	syntax = format("LSL64 ACC:P, %d", shift+1)
	image = format("0101 0110 1010 %4b", shift)
	action = {
		//
	}
// DOC: page 235
op lsl64_ACC_T()
	syntax = "LSL64 ACC:P, T"
	image = "0101 0110 0101 0010"
	action = {
		//
	}
// DOC: page 236
op lsll_ACC_T()
	syntax = "LSLL ACC, T"
	image = "0101 0110 0011 1011"
	action = {
		//
	}
// DOC: page 238
op lsr_AX_T(ax: ACC)
	syntax = format("LSR %s, T", ax)
	image = format("1111 1111 0110 001%s", ax)
	action = {
		//
	}
// DOC: page 239
op lsr64_ACC(shift: card(4))
	syntax = format("LSR64 ACC:P, %d", shift+1)
	image = format("0101 0110 1001 %4b", shift)
	action = {
		//
	}
// DOC: page 240
op lsr64_ACC_T()
	syntax = "LSR64 ACC:P, T"
	image = "0101 0110 0101 1011"
	action = {
		//
	}
// DOC: page 241
op lsrl_ACC_T()
	syntax = "LSRL ACC, T"
	image = "0101 0110 0010 0010"
	action = {
		//
	}
// DOC: page 242
op macp_loc16(loc: LOC16, imm: card(16))
	syntax = format("MAC P, %s, 0:0x%04x", loc, imm)
	image = format("0001 0100 %s %16b", loc, imm)
	action = {
		//
	}

// DOC: page 244
op macp_loc16_xar7(xartype: bit, loc: LOC16)
	pp = if xartype == 0 then "*XAR7++" else "*XAR7" endif
	syntax = format("MAC P, %s, %s", loc, pp)
	image = format("0101 0110 0000 0111 1%1b00 0111 %s", xartype, loc)
	action = {
		//
	}

// DOC: page 246
op max_ax(ax: ACC, loc: LOC16)
	syntax = format("MAX %s, %s", ax, loc)
	image = format("0101 0110 0111 001%s 0000 0000 %s", ax, loc)
	action = {
		//if(AX < [loc16]), AX = [loc16];
		//if(AX >= [loc16]), AX = unchanged;
	}

// DOC: page 247
op maxcul(addr: LOC32)
	syntax = format("MAXCUL P, %s", addr)
	image = format("0101 0110 0101 0001 0000 0000 %s", addr)
	action = {
		//
	}

// DOC: page 248
op maxl(addr: LOC32)
	syntax = format("MAXL ACC, %s", addr)
	image = format("0101 0110 0110 0001 0000 0000 %s", addr)
	action = {
		//
	}

// DOC: page 249
op min(ax: ACC, addr: LOC16)
	syntax = format("MIN %s, %s", ax, addr)
	image = format("0101 0110 0111 010%s 0000 0000 %s", ax, addr)
	action = {
		//
	}

// DOC: page 250
op mincul(addr: LOC32)
	syntax = format("MINCUL P, %s", addr)
	image = format("0101 0110 0101 1001 xxxx xxxx %s", addr)
	action = {
		//
	}

// DOC: page 251
op minl(addr: LOC32)
	syntax = format("MINL ACC, %s", addr)
	image = format("0101 0110 0101 0000 0000 0000 %s", addr)
	action = {
		//
	}


// DOC: page 253
op mov_acc_imm(shift: card(4), imm: card(16))
	syntax = 
        if shift then format("MOV ACC, #%d << #%d", imm, shift)
        else format("MOV ACC, #%d", imm) endif
	image = format("1111 1111 0010 %4b %16b", shift, imm)
	action = {
		//
	}

// DOC: page 254
op mov_acc_loc16(addr: LOC16)
	syntax = format("MOV ACC, %s << T", addr)
	image = format("0101 0110 0000 0110 0000 0000 %s", addr)
	action = {
		//
	}

// ASSUMES OBJMODE = 1
// DOC: page 255
op mov_acc_loc16_shift_0(src: LOC16)
	syntax = format("MOV ACC, %s", src)
	image = format("1000 0101 %s", src)
	action = {
		//
	}
// TESTED
// ASSUMES OBJMODE = 1
// DOC: page 255
op mov_acc_loc16_shift_1to15(src: LOC16, shift: card(4))
    syntax =
        if shift then
            format("MOV ACC, %s << %d", src, shift)
        else
            format("MOV ACC, %s", src)
        endif
    image = format("0101 0110 0000 0011 0000 %4b %s", shift, src)
    action = {
        //
    }
// DOC: page 255
op mov_acc_loc16_shift_16(src: LOC16)
    syntax = format("MOV ACC, %s << 16", src)
    image = format("0010 0101 %s", src)
    action = {
        //
    }

// DOC: page 258
op mov_dp(imm: card(10))
	syntax = format("MOV DP, %d", imm)
	image = format("1111 10%10b", imm)
	action = { 

	}

// DOC: page 259
op mov_ier(src: LOC16)
	syntax = format("MOV IER, %s", src)
	image = format("0010 0011 %s", src)
	action = {
		//IER = [loc16];
	}

// DOC: page 260
op mov_loc16_const(dest: LOC16, imm:card(16))
	syntax = format("MOV %s, #0x%04x", dest, imm)
	image = format("0010 1000 %s %16b", dest, imm)
	action = {
		//[loc16] = 16bit;
	}

// DOC: page 261
op mov_loc16_val(dest: LOC16, val: card(16))
	syntax = format("MOV %s, *(0x%x)", dest, val)
	image = format("1111 0101 %s %16b", dest, val)
	action = {
		//[loc16] = [0x0000:16bit];
	}

// DOC: page 263
op mov_loc16_acc_shift1(src: LOC16)
	syntax = format("MOV %s, ACC << 1", src)
	image = format("1011 0001 %s", src)
	action = {
		//
	}
// ASSUMES OBJMODE = 1
// DOC: page 263
op mov_loc16_acc_shift2to8(src: LOC16, shift: card(3))
    syntax = format("MOV %s, ACC << %d", src, shift + 1)
    image = format("0101 0110 0010 1101 0000 0%3b %s", shift, src)
    action = {
        //
    }

// DOC: page 266
op mov_loc16_ax_cond(ax: ACC, cond: COND, addr: LOC16)
	syntax = format("MOV %s, %s, %s", addr, ax, cond)
	image = format("0101 0110 0010 101%s 0000 %s %s", ax, cond, addr)
	action = {
		//
	}

// DOC: page 268
op mov_loc16_IER(src: LOC16)
    syntax = format("MOV %s, IER", src)
    image = format("0010 0000 %s", src)
    action = { 
        //[loc16] = IER;
    }

// DOC: page 269
op mov_loc16_ovc(dest: LOC16)
	syntax = format("MOV %s, OVC", dest)
	image = format("0101 0110 0010 1001 0000 0000 %s", dest)
	action = {
		//[loc16(15:10)] = OVC; [loc16(9:0)] = 0;
	}

// DOC: page 270
op mov_loc16_p(dest: LOC16)
	syntax = format("MOV %s, P", dest)
	image = format("0011 1111 %s", dest)
	action = {
		//[loc16] = P << PM;
	}

// DOC: page 271
op mov_loc16_T(dest: LOC16)
	syntax = format("MOV %s, T", dest)
	image = format("0010 0001 %s", dest)
	action = { 
		//[loc16] = T;
	}

// DOC: page 272
op mov_OVC_loc16(src: LOC16)
	syntax = format("MOV OVC, %s", src)
	image = format("0101 0110 0000 0010 0000 0000 %s", src)
	action = { 
		//OVC = [loc16(15:10)];
	}

// DOC: page 274
op mov_pl_loc16(src: LOC16)
	syntax = format("MOV PL, %s", src)
	image = format("0010 0111 %s", src)
	action = { 
		//PL = [loc16];
		//PH = unchanged;
	}

// DOC: page 275
op mov_pm_ax(ax: ACC)
	syntax = format("MOV PM, %s", ax)
	image = format("0101 0110 0011 100%s", ax)
	action = { 
		//PM = AX(2:0);
	}

// DOC: page 276
op mov_T_loc16(src: LOC16)
	syntax = format("MOV T, %s", src)
	image = format("0010 1101 %s", src)
	action = { 
		//T = [loc16];
	}

// DOC: page 277
op mov_TL()
	syntax = "MOV TL, #0"
	image = "0101 0110 0101 0110"
	action = { 
		//TL = 0x0000;
		//T = unchanged;
	}

// DOC: page 278
op mov_xarn_pc(xarn: card(3))
	syntax = format("MOV XAR%d, PC", xarn)
	image = format("0011 1110 0101 1%3b", xarn)
	action = { 
		//XARn = 0:PC;
	}

// DOC: page 279,141
op mova__addl_ACC_P(src: LOC16)
	syntax =
		if src.num == 0b10101100 then
			"ADDL ACC, P << PM" // alias
		else
			format("MOVA T, %s", src)
		endif
	image = format("0001 0000 %s", src)
	action = { 
		//T = [loc16];
		//ACC = ACC + P << PM;
	}

// DOC: page 280
op movad(src: LOC16)
	syntax = format("MOVAD T, %s", src)
	image = format("1010 0111 %s", src)
	action = { 
		//
	}

// DOC: page 282, 294
op movb_XARn__movb_ARn(arn: card(3), imm: card(8))
	syntax = 
		if arn == 0b110 then 
			format("MOVB AR6, #0x%x", imm)
			else if arn == 0b111 then 
				format("MOVB AR7, #0x%x", imm)
			else
				format("MOVB XAR%d, #0x%x", arn, imm)
			endif
		endif
	image = format("1101 0%3b %8b", arn, imm)
	action = { 

	}

// DOC: page 284
op movb_ax_lsb(ax: ACC, loc: LOC16)
	syntax = format("MOVB %s.LSB, %s", ax, loc)
	image = format("1100 011%s %s", ax, loc)
	action = { 
		//
	}

// DOC: page 286
op movb_ax_msb(ax: ACC, loc:LOC16)
	syntax = format("MOVB %s.MSB, %s", ax, loc)
	image = format("0011 100%s %s", ax, loc)
	action = { 
		//
	}

// // DOC: page 288
op movb_loc16_8bit_cond(imm: card(8), loc: LOC16, cond: COND)
	syntax = format("MOVB %s, #0x%02x, %s", loc, imm, cond)
	image = format("0101 0110 1011 %s %8b %s", cond, imm, loc)
	action = { 
		//
	}

// DOC: page 290
op movb_loc16_ax_lsb(ax: ACC, loc: LOC16)
	syntax = format("MOVB %s, %s.LSB", ax, loc)
	image = format("0011 110%s %s", ax, loc)
	action = { 
		//
	}

// DOC: page 292
op movb_loc16_ax_msb(ax: ACC, loc: LOC16)
	syntax = format("MOVB %s, %s.MSB", loc, ax)
    image = format("1100 100%s %s", ax, loc)
	action = { 
		//
	}

// DOC: page 295
op movdl_xt_loc32(src: LOC32)
	syntax = format("MOVDL XT, %s", src)
	image = format("1010 0110 %s", src)
	action = { 
		//XT = [loc32];
		//[loc32 + 2] = XT;
	}

// DOC: page 296
op movh_ACC_1(src: LOC16)
	syntax = format("MOVH %s, ACC << 1", src)
	image = format("1011 0011 %s", src)
	action = { 
		//
	}
op movh_ACC_shift_objmode(src: LOC16, shift: card(3))
    syntax = format("MOVH %s, ACC << %d", src, shift + 1)
    image = format("0101 0110 0010 1111 0000 0%3b %s", shift, src)
    action = { 

    }
// UNIMPLEMENTED: OBJMODE 0 instruction
// op movh_ACC_shift(src: LOC16, shift: card(3))
//     syntax = format("MOVH %s, ACC << %d", src, shift)
//     image = format("1011 0%3b %s", shift, src)
//     action = { 

//     }

// DOC: page 297
op movh_loc16_p(loc: LOC16)
	syntax = format("MOVH %s, P", loc)
	image = format("0101 0111 %s", loc)
	action = { 
		//[loc16] = (P << PM) >> 16;
	}

// DOC: page 298, 353
// POP ACC is aliased to here
op movl_ACC_loc32(src: LOC32)
	syntax = format("MOVL ACC, %s", src.syntax)
	image = format("0000 0110 %s", src.image)
	action = {

	 } 


// DOC: page 299, 311
op movl_acc_p__movp(src: LOC16)
	syntax =
        if src.num == 0b10101100 then
            "MOVL ACC, P << PM" 
        else
            format("MOVP T, %s", src)
        endif
	image = format("0001 0110 %s", src)
	action = { 

	}

//PUSH ACC is an alias for MOV*SP++, ACC 
// DOC: page 300, 369
op movl_loc32_ACC__push_ACC(src: LOC32)
	syntax = format("MOVL %s, ACC", src.syntax)
	image = format("0001 1110 %s", src.image)
	action = { 

	}

// DOC: page 301
op movl_loc32_acc_cond(cond: COND, loc: LOC32)
	syntax = format("MOVL %s, ACC, %s", loc, cond)
	image = format("0101 0110 0100 1000 0000 %s %s", cond, loc)
	action = { 
		//
	}

// DOC: page 303
op movl_loc32_p(dest: LOC32)
	syntax = format("MOVL %s, P", dest)
	image = format("1010 1001 %s", dest)
	action = { 
		//[loc32] = P;
	}

// DOC: page 305, 383
// PUSH XT is an alias for one of these commands
	syntax = format("MOVL %s, XT", dest)
	image = format("1010 1011 %s", dest)
	action = {
		//[loc32] = XT;
	}

// DOC: page 306
op movl_p_ACC()
	syntax = "MOVL P, ACC"
	image = "1111 1111 0101 1010"
	action = {
		//P = ACC;
	}

// DOC: page 307
op movl_p_loc32(src: LOC32)
	syntax = format("MOVL P, %s", src)
	image = format("1010 0011 %s", src)
	action = {
		//P = [loc32];
	}


// DOC: page 308, 366
//POP XARn is aliased to here
macro MakeMovlXarnLoc32(xarn, fmt) = \
	syntax = format("MOVL %s, %s", xarn, src.syntax) \
	image = format(fmt, src)\
	action = {\
		// SP −= 2;\
		// XARn = [SP];\
	}
op movl_XAR0_loc32(src: LOC32) MakeMovlXarnLoc32("XAR0", "1000 1110 %s")
op movl_XAR1_loc32(src: LOC32) MakeMovlXarnLoc32("XAR1", "1000 1011 %s")
op movl_XAR2_loc32(src: LOC32) MakeMovlXarnLoc32("XAR2", "1000 0110 %s")
op movl_XAR3_loc32(src: LOC32) MakeMovlXarnLoc32("XAR3", "1000 0010 %s")
op movl_XAR4_loc32(src: LOC32) MakeMovlXarnLoc32("XAR4", "1000 1010 %s")
op movl_XAR5_loc32(src: LOC32) MakeMovlXarnLoc32("XAR5", "1000 0011 %s")
op movl_XAR6_loc32(src: LOC32) MakeMovlXarnLoc32("XAR6", "1100 0100 %s")
op movl_XAR7_loc32(src: LOC32) MakeMovlXarnLoc32("XAR7", "1100 0101 %s")


// // DOC: page 310, 367
//POP XT is aliased to here
op movl_xt_loc32(src: LOC32)
	syntax = format("MOVL XT, %s", src)
	image = format("1000 0111 %s", src)
	action = {
		//XT = [loc32];
	}



// DOC: page 312, 429
op movs__subl_acc_p_pm(src: LOC16)
	syntax = if src.num == 0b10101100 then "SUBL ACC,P << PM" else format("MOVS T, %s", src) endif
	image = format("0001 0001 %s", src)
	action = {
		//T = [loc16];
		//ACC = ACC − P << PM;
	}

// DOC: page 313
op movu_acc_loc16(src: LOC16)
	syntax = format("MOVU ACC, %s", src)
	image = format("0000 1110 %s", src)
	action = {
		//AL = [loc16];
		//AH = 0x0000;
	}

// DOC: page 314
op movu_loc16_OVC(dest: LOC16)
	syntax = format("MOVU %s, OVC", dest)
	image = format("0101 0110 0010 1000 0000 0000 %s", dest)
	action = {
		//[loc16(15:6)] = 0;
		//[loc16(5:0)] = OVC;
	}

// DOC: page 315
op movu_OVC_loc16(src: LOC16)
	syntax = format("MOVU OVC, %s", src)
	image = format("0101 0110 0110 0010 0000 0000 %s", src)
	action = {
		//OVC = [loc16(5:0)]
	}


// DOC: page 317
op movx(src: LOC16)
	syntax = format("MOVX TL, %s", src)
	image = format("0101 0110 0010 0001 xxxx xxxx %s", src)
	action = {
		//TL = [loc16];
		//T = sign extension of TL;
	}

// DOC: page 319
op movz_dp(imm: card(10))
	syntax = format("MOVZ DP, #%d", imm)
	image = format("1011 10%10b", imm)
	action = {
		//DP(9:0) = 10bit;
		//DP(15:10) = 0;
	}

// DOC: page 320
op mpy_ACC(loc: LOC16, imm:card(16))
	syntax = format("MPY ACC, %s, #%d", loc, imm)
	image = format("0011 0100 %s %16b", loc, imm)
	action = {
		//T = [loc16];
		//ACC = signed T * signed 16bit;
	}

// DOC: page 321
op mpy_ACC_T(loc: LOC16)
	syntax = format("MPY ACC, T, %s", loc)
	image = format("0001 0010 %s", loc)
	action = {
		//ACC = signed T * signed [loc16];
	}

// DOC: page 322
op mpy_P(loc: LOC16, imm: card(16))
	syntax = format("MPY P, %s, #%d", loc, imm)
	image = format("1000 1100 %s %16b", loc, imm)
	action = {
		//P = signed [loc16] * signed 16bit;
	}

// DOC: page 323
op mpy_P_T(loc: LOC16)
	syntax = format("MPY P, T, %s", loc)
	image = format("0011 0011 %s", loc)
	action = {
		//P = signed T * signed [loc16];
	}

// DOC: page 324
op mpya_P(loc: LOC16, imm: card(16))
	syntax = format("MPYA P, %s, #%d", loc, imm)
	image = format("0001 0101 %s %16b", loc, imm)
	action = {
		//ACC = ACC + P << PM;
		//T = [loc16];
		//P = signed T * signed 16bit;
	}

// DOC: page 325
op mpya_P_T(loc: LOC16)
	syntax = format("MPYA P, T, %s", loc)
	image = format("0001 0111 %s", loc)
	action = {
		//ACC = ACC + P << PM;
		//P = signed T * signed [loc16];
	}

// DOC: page 326
op mpyb_ACC(imm: card(8))
	syntax = format("MPYB ACC, T, %d", imm)
	image = format("0011 0101 %8b", imm)
	action = {
		//ACC = signed T * 0:8bit
	}

// DOC: page 327
op mpyb_P(imm: card(8))
	syntax = format("MPYB P, T, %d", imm)
	image = format("0011 0001 %8b", imm)
	action = {
		//P = signed T * 0:8bit;
	}

// DOC: page 328
op mpys_P(loc: LOC16)
	syntax = format("MPYS P, T, %s", loc)
	image = format("0001 0011 %8b", loc)
	action = {
		//
	}

// DOC: page 329
op mpyu_p(loc: LOC16)
	syntax = format("MPYU P, T, %s", loc)
	image = format("0011 0111 %s", loc)
	action = {
		//P = unsigned T * unsigned [loc16];
	}

// DOC: page 330
op mpyu_ACC(loc: LOC16)
	syntax = format("MPYU ACC, T, %s", loc)
	image = format("0011 0110 %s", loc)
	action = {
		//ACC = unsigned T * unsigned [loc16];
	}

// DOC: page 331
op mpyxu_ACC(loc: LOC16)
	syntax = format("MPYXU ACC, T, %s", loc)
	image = format("0011 0000 %s", loc)
	action = {
		//ACC = signed T * unsigned [loc16];
	}

// DOC: page 332
op mpyxu_P(loc: LOC16)
	syntax = format("MPYXU P, T, %s", loc)
	image = format("0011 0010 %s", loc)
	action = {
		//P = signed T * unsigned [loc16];
	}

// DOC: page 333
op nasp()
	syntax = "NASP"
	image = "0111 0110 0001 0111"
	action = {
		//
	}

// DOC: page 334
op neg_ACC()
	syntax = "NEG ACC"
	image = "1111 1111 0101 0100"
	action = {
		//
	}

// DOC: page 335
op neg_ax(ax: ACC)
	syntax = format("NEG %s", ax)
	image = format("1111 1111 0101 110%s", ax)
	action = {
		//
	}

// DOC: page 336
op neg64_ax()
	syntax = "NEG64 ACC:P"
	image = "0101 0110 0101 1000"
	action = {
		//
	}

// DOC: page 337
op negtc_acc()
	syntax = "NEGTC ACC"
	image = "0101 0110 0011 0010"
	action = {
		//
	}

// DOC: page 340
op norm_ACC_ind1()
	syntax = "NORM ACC, *"
	image = "0101 0110 0010 0100"
	action = { }
op norm_ACC_ind2()
	syntax = "NORM ACC, *++"
	image = "0101 0110 0101 1010"
	action = { }
op norm_ACC_ind3()
	syntax = "NORM ACC, *- -"
	image = "0101 0110 0010 0000"
	action = { }
op norm_ACC_ind4()
	syntax = "NORM ACC, *0++"
	image = "0101 0110 0111 0111"
	action = { }
op norm_ACC_ind5()
	syntax = "NORM ACC, *0- -"
	image = "0101 0110 0011 0000"
	action = { }

// DOC: page 341
op norm_ACC_XARn(xarn: card(3), operator: bit)
	operator_str = if operator == 1 then "++" else "--" endif
	syntax = format("NORM, ACC, XAR%d%s", xarn, operator_str)
	image = format("1111 1111 0111 %1b%3b", operator, xarn)
	action = { }

// DOC: page 342
op not_acc()
	syntax = "NOT ACC"
	image = "1111 1111 0101 0101"
	action = { }

// DOC: page 343
op not_ax(ax: ACC)
	syntax = format("NOT %s", ax)
	image = format("1111 1111 0101 111%s", ax)
	action = { }
	
// DOC: page 344
op or_acc_loc16(src: LOC16)
	syntax = format("OR ACC, %s", src)
	image = format("1010 1111 %s", src)
	action = { }

// DOC: page 345
op or_acc_16bit_0_15(imm: card(16), shift: card(4))
	syntax = 
    if shift then format("OR ACC, #0x%x << #%d", imm, shift)
    else format("OR ACC, #0x%x", imm) endif
	image  = format("0011 1110 0001 %4b %16b", shift, imm)
	action = {
		// ACC = ACC OR (0:16bit << shift value);
	}
// DOC: page 345
op or_acc_16bit_16(imm: card(16))
	syntax = format("OR ACC, #0x%x << #16", imm)
	image  = format("0101 0110 0100 1010 %16b", imm)
	action = {
		// ACC = ACC OR (0:16bit << 16);
	}

// DOC: page 346
op or_ax_loc16(ax: ACC, src: LOC16)
	syntax = format("OR %s, %s", ax, src)
	image  = format("1100 101%s %s", ax, src)
	action = {
		// AX = AX OR [loc16];
	}

// DOC: page 347
op or_ier_16bit(imm: card(16))
	syntax = format("OR IER, #%d", imm)
	image  = format("0111 0110 0010 0011 %16b", imm)
	action = {
		// IER = IER OR #16bit;
	}

// DOC: page 348
op or_ifr_16bit(imm: card(16))
	syntax = format("OR IFR, #%d", imm)
	image  = format("0111 0110 0010 0111 %16b", imm)
	action = {
		// IFR = IFR OR #16bit;
	}

// DOC: page 349
op or_loc16_16bit(dest: LOC16, imm: card(16))
	syntax = format("OR %s, #0x%x", dest, imm)
	image  = format("0001 1010 %s %16b", dest, imm)
	action = {
		// [loc16] = [loc16] OR 16bit;
	}

// DOC: page 350
op or_loc16_ax(dest: LOC16, ax: ACC)
	syntax = format("OR %s, %s", dest, ax)
	image  = format("1001 100%s %s", ax ,dest)
	action = {
		// [loc16] = [loc16] OR AX;
	}

// DOC: page 351
op orb_ax_8bit(ax: ACC, imm: card(8))
	syntax = format("ORB %s, #%d", ax, imm)
	image  = format("0101 000%s %8b", ax, imm)
	action = {
		// AX = AX OR 0x00:8bit;
	}

// DOC: page 352
op out_pa_loc16(src: LOC16, addr: card(16))
	syntax = format("OUT *(0x%04x), %s", addr, src)
	image  = format("1011 1100 %s %16b", src, addr)
	action = {
		// IOspace[0x0000PA] = [loc16];
	}

// DOC: page 354
op pop_ar1_ar0()
	syntax = "POP AR1:AR0"
	image = "0111 0110 0000 0111"
	action = { 

	}
op pop_ar3_ar2()
	syntax = "POP AR3:AR2"
	image = "0111 0110 0000 0101"
	action = { 

	}
op pop_ar5_ar4()
	syntax = "POP AR5:AR4"
	image = "0111 0110 0000 0110"
	action = { 

	}

// DOC: page 355
op pop_ar1h_ar0h()
	syntax = "POP AR1H:AR0H"
	image = "0000 0000 0000 0011"
	action = {
		// SP
		// −= 2; AR0H
		// = [SP]; AR1H =
		// [SP+1];
		// AR1:AR0 = unchanged;
	}

// DOC: page 356
op pop_dbgier()
	syntax = "POP DBGIER"
	image = "0111 0110 0001 0010"
	action = {
		// SP −= 1;
		// DBGIER = [SP];
	}

// DOC: page 357
op pop_dp()
	syntax = "POP DP"
	image = "0111 0110 0000 0011"
	action = { 
		// SP −= 1;
		// DP = [SP];
	}

// DOC: page 358
op pop_dp_st1()
	syntax = "POP DP:ST1"
	image = "0111 0110 0000 0001"
	action = {
		// SP −= 2;
		// ST1 = [SP];
		// DP = [SP+1];
	}

// DOC: page 359
op pop_ifr()
	syntax = "POP IFR"
	image = "0000 0000 0000 0010"
	action = {
		// SP −= 1;
		// IFR = [SP];
	}

// DOC: page 360
op pop_loc16(src: LOC16)
	syntax = format("POP %s", src)
	image = format("0010 1010 %s", src)
	action = {
		// SP -= 1;
		// [loc16] = [SP];
	}

// DOC: page 361
op pop_p()
	syntax = "POP P"
	image = "0111 0110 0001 0001"
	action = {
		// SP −= 2;
		// P = [SP];
	}

// DOC: page 362
op pop_rpc()
	syntax = "POP RPC"
	image = "0000 0000 0000 0111"
	action = {
		// SP −= 2;
		// RPC = [SP];
	}

// DOC: page 363
op pop_st0()
	syntax = "POP ST0"
	image = "0111 0110 0001 0011"
	action = {
		// SP −= 1;
		// ST0 = [SP];
	}

// DOC: page 364
op pop_st1()
	syntax = "POP ST1"
	image = "0111 0110 0000 0000"
	action = {
		// SP −= 1;
		// ST1 = [SP];
	}

// DOC: page 365
op pop_t_st0()
	syntax = "POP T:ST0"
	image = "0111 0110 0001 0101"
	action = {
		// SP −= 2;
		// T = [SP];
		// ST0 = [SP+1];
		// TL = unchanged;
	}

// DOC: page 368
op pread_loc16_xar7(dest: LOC16)
	syntax = format("PREAD %s, *XAR7", dest)
	image = format("0010 0100 %s", dest)
	action = {
		// [loc16] = Prog[*XAR7];
	}

// DOC: page 370
op push_ar1_ar0()
	syntax = "PUSH AR1:AR0"
	image = "0111 0110 0000 1101"
	action = { 

	}
op push_ar3_ar2()
	syntax = "PUSH AR3:AR2"
	image = "0111 0110 0000 1111"
	action = { 

	}
op push_ar5_ar4()
	syntax = "PUSH AR5:AR4"
	image = "0111 0110 0000 1100"
	action = { 

	}
// DOC: page 371
op push_ar1h_ar0h()
	syntax = "PUSH AR1H:AR0H"
	image = "0000 0000 0000 0101"
	action = {
		// [SP] = AR0H;
		// [SP+1] = AR1H;
		// SP += 2;
	}

// DOC: page 372
op push_dbgier()
	syntax = "PUSH DBGIER"
	image = "0111 0110 0000 1110"
	action = {
		// [SP] = DBGIER;
		// SP += 1;
	}

// DOC: page 373
op push_dp()
	syntax = "PUSH DP"
	image = "0111 0110 0000 1011"
	action = {
		// [SP] = DP;
		// SP += 1;
	}

// DOC: page 374
op push_dp_st1()
	syntax = "PUSH DP:ST1"
	image = "0111 0110 0000 1001"
	action = {
		// [SP] = ST1;
		// [SP+1] = DP;
		// SP += 2;
	}

// DOC: page 375
op push_ifr()
	syntax = "PUSH IFR"
	image = "0111 0110 0000 1010"
	action = {
		// [SP] = IFR;
		// SP += 1;
	}

// DOC: page 376
op push_loc16(src: LOC16)
	syntax = format("PUSH %s", src)
	image = format("0010 0010 %s", src)
	action = {
		// [SP] = [loc16];
		// SP += 1;
	}

// DOC: page 377
op push_p()
	syntax = "PUSH P"
	image = "0111 0110 0001 1101"
	action = {
		// [SP] = P;
		// SP += 2;
	}

// DOC: page 378
op push_rpc()
	syntax = "PUSH RPC"
	image = "0000 0000 0000 0100"
	action = {
		// [SP] = RPC;
		// SP += 2;
	}

// DOC: page 379
op push_st0()
	syntax = "PUSH ST0"
	image = "0111 0110 0001 1000"
	action = {
		// [SP] = ST0;
		// SP += 1;
	}

// DOC: page 380
op push_st1()
	syntax = "PUSH ST1"
	image = "0111 0110 0000 1000"
	action = {
		// [SP] = ST1;
		// SP += 1;
	}

// DOC: page 381
op push_t_st0()
	syntax = "PUSH T:ST0"
	image = "0111 0110 0001 1001"
	action = {
		// [SP] = ST0;
		// [SP+1] = T;
		// SP += 2;
	}


// DOC: page 384
op pwrite_xar7(src: LOC16)
	syntax = format("PWRITE *XAR7, %s", src)
	image = format("0010 0110 %s", src)
	action = {

	}

// DOC: page 385
op qmacl(optype: bit, loc: LOC32)
    syntax = format("QMACL P, %s, %s", loc, if optype == 0 then "*XAR7" else "*XAR7++" endif)
	image = format("0101 0110 0100 1111 1%1b00 0111 %s", optype, loc)
	action = {

	}

// DOC: page 387
op qmpyal_p_xt_loc32(src: LOC32)
	syntax = format("QMPYAL P, XT, %s", src)
	image = format("0101 0110 0100 0110 0000 0000 %s", src)
	action = {
		// ACC = ACC + P << PM;
		// P = (signed T * signed [loc32]) >> 32;
	}

// DOC: page 388
op qmpyl_p(src: LOC32)
	syntax = format("QMPYL P, XT, %s", src)
	image = format("0101 0110 0110 0111 0000 0000 %s", src)
	action = {
		// P = (signed XT * signed [loc32]) >> 32;
	}

// DOC: page 389
op qmpyl_acc(src: LOC32)
	syntax = format("QMPYL ACC, XT, %s", src)
	image = format("0101 0110 0110 0011 0000 0000 %s", src)
	action = {
		// ACC = (signed XT * signed [loc32]) >> 32;
	}

// DOC: page 390
op qmpysl(src: LOC32)
	syntax = format("QMPYSL P, XT, %s", src)
	image = format("0101 0110 0100 0101 0000 0000 %s", src)
	action = {
		// ACC = ACC − P << PM;
		// P = (signed T * signed [loc32]) >> 32;
	}

// DOC: page 391
op qmpyul(src: LOC32)
	syntax = format("QMPYUL P, XT, %s", src)
	image = format("0101 0110 0100 0111 0000 0000 %s", src)
	action = {
		// P = (unsigned XT * unsigned [loc32]) >> 32;
	}

// DOC: page 392
op qmpyxul(src: LOC32)
	syntax = format("QMPYXUL P, XT, %s", src)
	image = format("0101 0110 0100 0010 0000 0000 %s", src)
	action = {
		// P = (signed XT * unsigned [loc32]) >> 32;
	}

// DOC: page 393
op rol_acc()
	syntax = "ROL ACC"
	image = "1111 1111 0101 0011"
	action = {

	}

// DOC: page 394
op ror_acc()
	syntax = "ROR ACC"
	image = "1111 1111 0101 0010"
	action = {

	}

// DOC: page 395
op rpt_imm(imm: card(8))
	syntax = format("RPT #%d", imm)
	image = format("1111 0110 %8b", imm)
	action = { }
// DOC: page 395
op rpt_loc16(src: LOC16)
    syntax = format("RPT %s", src)
    image = format("1111 0111 %s", src)
    action = { }

// DOC: page 396
op sat_acc()
	syntax = "SAT ACC"
	image = "1111 1111 0101 0111"
	action = {

	}

// DOC: page 397
op sat64()
	syntax = "SAT64 ACC:P"
	image = "0101 0110 0011 1110"
	action = {

	}

// DOC: page 400
op sbbu(src: LOC16)
	syntax = format("SBBU ACC, %s", src)
	image = format("0001 1101 %s", src)
	action = {
		// ACC = ACC − 0:[loc16] − ~C;
	}

// DOC: page 401
op sbf(insttype: card(2), imm: card(8))
	sbftype = switch(insttype) { 
        case 0b00: "EQ"
        case 0b01: "NEQ"
        case 0b10: "TC"
        case 0b11: "NTC"
    }
	syntax = format("SBF %d, %s", imm, sbftype)
	image = format("1110 11%2b %8b", insttype, imm)
    // otawa_kind = BRANCH
	action = {

	}

// DOC: page 402
op sbrk_8bit(imm: card(8))
	syntax = format("SBRK #%d", imm)
	image = format("1111 1101 %8b", imm)
	action = {
		// XAR(ARP) = XAR(ARP) − 0:8bit;
	}

// DOC: page 403,186
op setc_mode(mode_bitset: card(8))
	_m = mode_bitset
	syntax = format("SETC %s%s%s%s%s%s%s%s",
		if _m<0..0> then format("SXM%s",  if _m<1..7>  then ", " else "" endif) else "" endif,
		if _m<1..1> then format("OVM%s",  if _m<2..7>  then ", " else "" endif) else "" endif,
		if _m<2..2> then format("TC%s",   if _m<3..7>  then ", " else "" endif) else "" endif,
		if _m<3..3> then format("C%s",    if _m<4..7>  then ", " else "" endif) else "" endif,
		if _m<4..4> then format("INTM%s", if _m<5..7>  then ", " else "" endif) else "" endif,
		if _m<5..5> then format("DBGM%s", if _m<6..7>  then ", " else "" endif) else "" endif,
		if _m<6..6> then format("PAGE0%s",if _m<7..7>  then ", " else "" endif) else "" endif,
		if _m<7..7> then "VMAP" else "" endif)
	image = format("0011 1011 %8b", mode_bitset)
	action = {
		// Set the specified status bits.
	}

// DOC: page 405
op setc_M0M1MAP()
	syntax = "SETC M0M1MAP"
	image = "0101 0110 0001 1010"
	action = {

	}

// DOC: page 406
op setc_objmode()
	syntax = "SETC OBJMODE"
	image = "0101 0110 0001 1111"
	action = {
		// Set the Objmode status bit, putting the device in C28x object mode (supports C2XLP source).
	}

// DOC: page 407
op setc_xf()
	syntax = "SETC XF"
	image = "0101 0110 0010 0110"
	action = {
		// Set the XF status bit and pull the corresponding output signal high.
	}

// DOC: page 408
op sfr_acc(shift: card(4))
	syntax = format("SFR ACC, %d", shift+1)
	image = format("1111 1111 0100 %4b", shift)
	action = {
		// if(SXM = 1) // sign extension mode enabled
		// ACC = S:ACC >> shift value; // arithmetic shift right
		// else //sign extension mode disabled
		// ACC = 0:ACC >> shift value;// logical shift right
	}

// DOC: page 409
op sfr_acc_t()
	syntax = "SFR ACC, T"
	image = "1111 1111 0101 0001"
	action = {

	}

// DOC: page 410 // ASSUMES: AMODE = 0
op spm(pm_bits: card(3))
	pm_str = switch(pm_bits) {
		case 0b000: "+1"
		case 0b001: "0"
		case 0b010: "-1"
		case 0b011: "-2"
		case 0b100: "-3"
		case 0b101: "-4"
		case 0b110: "-5"
		case 0b111: "-6"
	}
	syntax = format("SPM #%s", pm_str)
	image = format("1111 1111 0110 1%3b", pm_bits)
	action = {

	}

// DOC: page 412
op sqra(src: LOC16)
	syntax = format("SQRA %s", src)
	image = format("0101 0110 0001 0101 0000 0000 %s", src)
	action = {
		// ACC = ACC + P << PM;
		// T = [loc16];
		// P = T * [loc16];
	}

// DOC: page 413
op sqrs(src: LOC16)
	syntax = format("SQRS %s", src)
	image = format("0101 0110 0001 0001 xxxx xxxx %s", src)
	action = {
		// ACC = ACC − P << PM;
		// T = [loc16];
		// P = T * [loc16];
	}

// ASSUMES OBJMODE = 1
// DOC: page 414
op sub_acc_loc16_shift_0(src: LOC16)
	syntax = format("SUB ACC, %s", src)
	image = format("1010 1110 %s", src)
	action = { }
// ASSUMES OBJMODE = 1
// DOC: page 414
op sub_acc_loc16_shift_1to15(src: LOC16, shift: card(4))
    syntax = format("SUB ACC, %s << #%d", src, shift)
    image = format("0101 0110 0000 0000 0000 %4b %s", shift, src)
    action = { }
// DOC: page 414
op sub_acc_loc16_shift_16(src: LOC16)
    syntax = format("SUB ACC, %s << #16", src)
    image = format("0000 0100 %s", src)
    action = { }

// // DOC: page 416
op sub_ACC_loc16(src: LOC16)
	syntax = format("SUB ACC, %s << T", src)
	image = format("0101 0110 0010 0111 0000 0000 %s", src)
	action = {

	}

// // DOC: page 417
op sub_ACC_16bit(shift: card(4), imm: card(16))
	syntax = format("SUB ACC, #%d << #%d", imm, shift)
	image = format("1111 1111 0000 %4b %16b", shift, imm)
	action = {

	}

// DOC: page 418
op sub_ax_loc16(ax: ACC, src: LOC16)
	syntax = format("SUB %s, %s", ax, src)
	image = format("1001 111%s %s", ax, src)
	action = {
		// AX = AX − [loc16];
	}

// DOC: page 419
op sub_loc16_ax(ax: ACC, src: LOC16)
	syntax = format("SUB %s, %s", src, ax)
	image = format("0111 010%s %s", ax, src)
	action = {
		// [loc16] = [loc16] − AX;
	}

// DOC: page 421
op subb_sp_7bit(imm: card(7))
	syntax = format("SUBB SP, #%d", imm)
	image = format("1111 1110 1%7b", imm)
	action = {
		// SP = SP − 0:7bit;
	}

// DOC: page 423
op subbl_acc_loc32(src: LOC32)
	syntax = format("SUBBL ACC, %s", src)
	image = format("0101 0110 0101 0100 0000 0000 %s", src)
	action = {
		// ACC = ACC − [loc32] − ~C;
	}

// DOC: page 424
op subcu_acc_loc16(src: LOC16)
	syntax = format("SUBCU ACC, %s", src)
	image = format("0001 1111 %s", src)
	action = {
		// temp(32:0) = ACC << 1 − [loc16] << 16
		// if( temp(32:0) > 0 )
		// ACC = temp(31:0) + 1
		// else
		// ACC = ACC << 1
	}

// DOC: page 426
op subcul_acc_loc32(src: LOC32)
	syntax = format("SUBCUL ACC, %s", src)
	image = format("0101 0110 0001 0111 0000 0000 %s", src)
	action = {
		// temp(32:0) = ACC << 1 + P(31) − [loc32];
		// if( temp(32:0) >= if( temp(32:0) >= 0 )
		// ACC = temp(31:0);
		// P = (P << 1) + 1;
		// else
		// ACC:P = ACC:P << 1;
	}

// DOC: page 428
op subl_acc_loc32(src: LOC32)
	syntax = format("SUBL ACC, %s", src)
	image = format("0000 0011 %s", src)
	action = {
		// ACC = ACC − [loc32];
	}

// DOC: page 430
op subl_loc32_acc(dest: LOC32)
	syntax = format("SUBL %s, ACC", dest)
	image = format("0101 0110 0100 0001 0000 0000 %s", dest)
	action = {
		// [loc32] = [loc32] − ACC;
	}

// DOC: page 431
op subr_loc16_ax(dest: LOC16, ax: ACC)
	syntax = format("SUBR %s, %s", dest, ax)
	image = format("1110 101%s %s", ax, dest)
	action = {
		// [loc16] = AX − [loc16]
	}

// DOC: page 432
op subrl_loc32_acc(dest: LOC32)
	syntax = format("SUBRL %s, ACC", dest)
	image = format("0101 0110 0100 1001 0000 0000 %s", dest)
	action = {
		// [loc32] = ACC − [loc32];
	}

// DOC: page 434
op subul_acc_loc32(src: LOC32)
	syntax = format("SUBUL ACC, %s", src)
	image = format("0101 0110 0101 0101 0000 0000 %s", src)
	action = {
		// ACC = ACC − [loc32]; // unsigned subtraction
	}

// DOC: page 435
op subul_p_loc32(src: LOC32)
	syntax = format("SUBUL P, %s", src)
	image = format("0101 0110 0101 1101 0000 0000 %s", src)
	action = {
		// P = P − [loc32]; // unsigned subtract
	}

op tbit_loc16_bit(src: LOC16, bit: card(4))
    syntax = format("TBIT %s, #0x%01x", src, bit)
    image = format("0100 %4b %s", bit, src)
    action = {
        //TC = [loc16(bit)];
    }

// DOC: page 437
op tbit_loc16_t(src: LOC16)
	syntax = format("TBIT %s, T", src)
	image = format("0101 0110 0010 0101 0000 0000 %s", src)
	action = {
		// bit = 15 − T(3:0);
		// TC = [loc16(bit)];
	}

// DOC: page 438
op tclr(dest: LOC16, imm: card(4))
	syntax = format("TCLR %s, #%d", dest, imm)
	image = format("0101 0110 0000 1001 0000 %4b %s", imm, dest)
	action = {
		// TC = [loc16(bit)];
		// [loc16(bit)] = 0;
	}

// DOC: page 439
op test_acc()
	syntax = "TEST ACC"
	image = "1111 1111 0101 1000"
	action = {
		// Modify flags on (ACC − 0x00000000);
	}

// DOC: page 440
op trap(vector_no: int(5))
	// vector_str = switch(vector_no) {
	// 	case 0: "RESET"
	// 	case 1: "INT1"
	// 	case 2: "INT2"
	// 	case 3: "INT3"
	// 	case 4: "INT4"
	// 	case 5: "INT5"
	// 	case 6: "INT6"
	// 	case 7: "INT7"
	// 	case 8: "INT8"
	// 	case 9: "INT9"
	// 	case 10: "INT10"
	// 	case 11: "INT11"
	// 	case 12: "INT12"
	// 	case 13: "INT13"
	// 	case 14: "INT14"
	// 	case 15: "DLOGINT"
	// 	case 16: "RTOSINT"
	// 	case 17: "Reserved"
	// 	case 18: "NMI"
	// 	case 19: "ILLEGAL"
	// 	case 20: "USER1"
	// 	case 21: "USER2"
	// 	case 22: "USER3"
	// 	case 23: "USER4"
	// 	case 24: "USER5"
	// 	case 25: "USER6"
	// 	case 26: "USER7"
	// 	case 27: "USER8"
	// 	case 28: "USER9"
	// 	case 29: "USER10"
	// 	case 30: "USER11"
	// 	case 31: "USER12"
	// }
	syntax = format("TRAP #%d", vector_no)
	image = format("0000 0000 001 %5b", vector_no)
    otawa_kind = TRAP
	action = { }

// DOC: page 442
op tset_loc16_16bit(dest: LOC16, index: card(4))
	syntax = format("TSET %s, #%d", dest, index)
	image = format("0101 0110 0000 1101 0000 %4b %s", index, dest)
	action = {
		// TC = [loc16(bit)];
		// [loc16(bit)] = 1;
	}

// DOC: page 443
op uout(src: LOC16, imm: card(16))
	syntax = format("UOUT *(0x%04x), %s", imm, src)
	image = format("1011 0000 %s %16b", src, imm)
	action = {
		// IOspace[0x000:PA] = loc16;
	}

// DOC: page 444
op xb_al()
	syntax = "XB *AL"
	image = "0101 0110 0001 0100"
    // otawa_kind = BRANCH
	action = {
		// PC = 0x3F:AL;
	}

// DOC: page 445
op xb_pma(arp: card(3), pma: card(16))
	syntax = format("XB 0x%04x, *, ARP%d", pma, arp)
	image = format("0011 1110 0111 0%3b %16b", arp, pma)
    // otawa_kind = BRANCH
	action = {
		// PC = 0x3F:pma;
		// ARP = n;
	}

// DOC: page 446
op xb_pma_cond(pma: card(16), cond: COND)
	syntax = format("XB 0x%04x, %s", pma, cond)
	image = format("0101 0110 1101 %s %16b", cond, pma)
    // otawa_kind = BRANCH
	action = {
		// If (COND = true) PC(15:0) = pma;
		// If (COND = false) PC(15:0) = PC(15:0) + 2;
		// PC(21:16) = 0x3F;
	}

// DOC: page 448
op xbanz(pma: card(16), ind: enum(0b010, 0b011, 0b100, 0b110, 0b111))
    ind_str =
        if ind == 0b010 then "++"  else
        if ind == 0b011 then "--"  else
        if ind == 0b100 then ""    else
        if ind == 0b110 then "0++" else
        if ind == 0b111 then "0--" else
        "<invalid>"
        endif endif endif endif endif
	syntax = format("XBANZ 0x%04x, *%s", pma, ind_str)
	image = format("0101 0110 0000 1%3b %16b", ind, pma)
    // otawa_kind = BRANCH
	action = { }
// DOC: page 448
op xbanz_arpn1(pma: card(16), arpn: card(3), ind_bit: bit)
    ind_str = if ind_bit == 0 then "" else "++" endif
    syntax = format("XBANZ 0x%04x, *%s, ARP%d", pma, ind_str, arpn)
    image = format("0011 1110 0011 %1b%3b %16b", ind_bit, arpn, pma)
    // otawa_kind = BRANCH
    action = { }
// DOC: page 448
op xbanz_arpn2(pma: card(16), arpn: card(3), ind_bit: bit)
    ind_str = if ind_bit == 0 then "--" else "0++" endif
    syntax = format("XBANZ 0x%04x, *%s, ARP%d", pma, ind_str, arpn)
    image = format("0011 1110 0100 %1b%3b %16b", ind_bit, arpn, pma)
    // otawa_kind = BRANCH
    action = { }
// DOC: page 448
op xbanz_arpn3(pma: card(16), arpn: card(3))
    syntax = format("XBANZ 0x%04x, *0--, ARP%d", pma, arpn)
    image = format("0011 1110 0101 0%3b %16b", arpn, pma)
    // otawa_kind = BRANCH
    action = { }

// DOC: page 450
op xcall_al()
	syntax = "XCALL *AL"
	image = "0101 0110 0011 0100"
    // otawa_kind = CALL
	action = {
		// temp(21:0) = PC + 1;
		// [SP] = temp(15:0);
		// SP = SP + 1;
		// C = 0x3F:AL;
	}

// DOC: page 451
op  xcall_pma(pma: card(16), arp: card(3))
	syntax = format("XCALL 0x%04x, *, ARP%d", pma, arp)
	image = format("0011 1110 0110 1%3b %16b", arp, pma)
    // otawa_kind = CALL
	action = {

	}

// // DOC: page 452
op xcall_pma_cond(cond: COND, pma: card(16))
	syntax = format("XCALL 0x%04x, %s", pma, cond)
	image = format("0101 0110 1110 %s %16b", cond, pma)
    // otawa_kind = CALL
	action = {
		// if(COND = true)
		// {
		// temp(21:0) = PC + 2;
		// [SP] = temp(15:0);
		// SP = SP + 1;
		// PC
		// = 0x3F:pma;
		// }
		// else
		// PC = PC + 2;
	}

// // DOC: page 454
op xmac(loc: LOC16, pma: card(16))
	syntax = format("XMAC P, %s, *(0x%04x)", loc, pma)
	image = format("1000 0100 %s %16b", loc, pma)
	action = {
		// ACC = ACC + P << PM;
		// T = [loc16];
		// P = signed T * signed Prog[0x3F:pma];
	}

// // DOC: page 456
op xmacd(loc: LOC16, pma: card(16))
	syntax = format("XMACD P, %s, *(0x%04x)", loc, pma)
	image = format("1010 0100 %s %16b", loc, pma)
	action = {
		// ACC = ACC + P << PM;
		// T = [loc16];
		// P = signed T * signed Prog[0x3F:pma];
		// [loc16 + 1] = T;
	}

// DOC: page 458
op xor_acc_loc16(src: LOC16)
	syntax = format("XOR ACC, %s", src)
	image = format("1011 0111 %s", src)
	action = {
		// 1011 0111 LLLL LLLL
	}

// // DOC: page 459
op xor_ACC_16bit_0to15(shift: card(4), imm: card(16))
	syntax = 
        if shift then format("XOR ACC, #%d << #%d", imm, shift)
        else format("XOR ACC, #%d", imm) endif
	image = format("0011 1110 0010 %4b %16b", shift, imm)
	action = {

	}

op xor_ACC_16bit_16(imm: card(16))
	syntax = format("XOR ACC,#%d << #16", imm)
	image = format("0101 0110 0100 1110 %16b", imm)
	action = {

	}

// DOC: page 460
op xor_ax_loc16(src: LOC16, ax: ACC)
	syntax = format("XOR %s, %s", ax, src)
	image = format("0111 000%s %s", ax, src)
	action = {
		// AX = AX XOR [loc16];
	}

// DOC: page 461
op xor_loc16_ax(dest: LOC16, ax: ACC)
	syntax = format("XOR %s, %s", dest, ax)
	image = format("1111 001%s %s", ax, dest)
	action = {
		// [loc16] = [loc16] XOR AX;
	}

// DOC: page 462
op xor_loc16_16bit(dest: LOC16, imm: card(16))
	syntax = format("XOR %s, #0x%x", dest, imm)
	image = format("0001 1100 %s %16b", dest, imm)
	action = {
		// [loc16] = [loc16] XOR 16bit;
	}

// DOC: page 463
op xorb(ax: ACC, imm: card(8))
	syntax = format("XORB %s, #%d", ax, imm)
	image = format("1111 000%s %8b", ax, imm)
	action = {
		// AX = AX XOR 0x00:8bit;
	}

// DOC: page 464
op xpread_loc16_pma(pma: card(16), loc: LOC16)
	syntax = format("XPREAD %s, *(0x%04x)", loc, pma)
	image = format("1010 1100 %s %16b", loc, pma)
	action = {
		// [loc16] = Prog[0x3F:pma];
	}

// DOC: page 465
op xpread_loc16_al(dest: LOC16)
	syntax = format("XPREAD %s, *AL", dest)
	image = format("0101 0110 0011 1100 0000 0000 %s", dest)
	action = {
		// [loc16] = Prog[0x3F:AL];
	}

// DOC: page 466
op xpwrite(src: LOC16)
	syntax = format("XPWRITE *A, %s", src)
	image = format("0101 0110 0011 1101 0000 0000 %s", src)
	action = {
		// Prog[0x3F:AL] = [loc16];
	}
// 467 is an alias for XRETC COND
// DOC: page 467, 468
op xret__xretc_cond(c: COND)
	syntax = format("XRETC %s", c)
	image = format("0101 0110 1111 %s", c)
    otawa_kind = RETURN
	action = {
		//instructions for XRET:
		// if(COND = true)
		// SP = SP − 1;
		// PC = 0x3F:[SP];

		//instructions for XRETC:
		// if(COND = true)
		// {
		// SP = SP − 1;
		// PC = 0x3F:[SP];
		// }
		// else
		// PC = PC + 1;

	}

// DOC: page 470
op zalr(src: LOC16)
	syntax = format("ZALR ACC, %s", src)
	image = format("0101 0110 0001 0011 0000 0000 %s", src)
	action = {
		// AH = [loc16];
		// AL = 0x8000;
	}

// DOC: page 471
// ALIAS: page 171
// op zap_ovc()
// 	syntax = "ZAP OVC"
// 	image = "0101 0110 0101 1100"
// 	action = {
// 		// Clear the overflow counter (OVC) bits in Status Register 0 (ST0).
// 	}

// DOC: page 472
op zapa()
	syntax = "ZAPA"
	image = "0101 0110 0011 0011"
	action = {
		// ACC = 0;
		// P = 0;
		// OVC = 0;
	}


///////////// Floating Point Instructions ///////////// 
// DOC: page 34
op absf32(rah: card(3), rbh: card(3))
    syntax = format("ABSF32 R%dH, R%dH", rah, rbh)
    image = format("1110 0110 1001 0101 0000 0000 00%3b %3b", rbh, rah)
    action = { 

    }

// DOC: page 35
op addf32_rah_imm_rbh(rah: RH, rbh: RH, imm: card(16))
    syntax = format("ADDF32 %s, #0x%x, %s", rah, imm, rbh)
    image = format("1110 1000 10%16b %s %s", imm, rbh, rah)
    action = { 

    }

// DOC: page 37
// Alias of  page 35, above
// op addf32_rah_rbh_imm(rah: RH, rbh: RH, imm:card(16))
//     syntax = format("ADDF32 %s, %s, #0x%x", rah, rbh, imm)
//     image = format("1110 1000 10%16b %s %s", imm, rbh, rah)
//     action = { 

//     }

// DOC: page 39
op addf32_threerh(rah: card(3), rbh:  card(3), rch: card(3))
    syntax = format("ADDF32 R%dH, R%dH, R%dH", rah, rbh, rch)
    image = format("1110 0111 0001 0000 0000 000%3b %3b %3b", rch, rbh, rah)
    action = { 

    }

// DOC: page 41
op addf32_threerh_and_mov32_mem32_rh(rah: RH, rdh: RH, reh: RH, rfh: RH, loc: LOC32)
    syntax = format("ADDF32 %s, %s, %s \n||MOV32 %s, %s", rdh, reh, rfh, loc, rah)
    image = format("1110 0000 0001 %s %s %s %s %s", rfh, reh, rdh, rah, loc)
    action = { 

    }

// DOC: page 43
op addf32_threerh_and_mov32_rh_mem32(rah: RH, rdh: RH, reh: RH, rfh: RH, loc: LOC32)
    syntax = format("ADDF32 %s, %s, %s \n||MOV32 %s, %s", rdh, reh, rfh, rah, loc)
    image = format("1110 0011 0001 %s %s %s %s %s", rfh, reh, rdh, rah, loc)
    action = { 

    }


// DOC: page 45
op cmpf32_tworh(rah: RH, rbh: RH)
    syntax = format("CMPF32 %s, %s", rah, rbh)
    image = format("1110 0110 1001 0100 0000 0000 00%s %s", rbh, rah)
    action = { 

    }

// DOC: page 46
op cmpf32_imm(rah: card(3), imm: card(16))
    syntax = format("CMPF32 R%dH, #0x%x", rah, imm)
    image = format("1110 1000 0001 0%16b %3b", imm, rah)
    action = { 

    }

// DOC: page 48
op cmpf32_zero(rah: card(3))
    syntax = format("CMPF32 R%dH, #0.0", rah)
    image = format("1110 0101 1010 0%3b", rah)
    action = {

    }

// DOC: page 49
op einvf32(rah: RH, rbh: RH)
    syntax = format("EINVF32 %s, %s", rah, rbh)
    image = format("1110 0110 1001 0011 0000 0000 00%s%s", rbh, rah)
    action = { 

    }

// DOC: page 51
op eisqrtf32(rah: RH, rbh: RH)
    syntax = format("EISQRTF32 %s %s", rah, rbh)
    image = format("1110 0110 1001 0010 0000 0000 00%3b%3b", rbh, rah)
    action = { 

    }

// DOC: page 53
op f32_to_i16(rah: RH, rbh: RH)
    syntax = format("F32TOI16 %s, %s", rah, rbh)
    image = format("1110 0110 1000 1100 0000 0000 00%s %s", rbh, rah)
    action = {

    }

// DOC: page 54
op f32_to_i16_r(rah: RH, rbh: RH)
    syntax = format("F32TOI16R, %s, %s", rah, rbh)
    image = format("1110 0110 1000 1100 1000 0000 00%s%s", rbh, rah)
    action = {

    }

// DOC: page 55
    op f32toi32(rah: RH, rbh: RH) 
    syntax = format("F32TOI32 %s, %s", rah, rbh)
    image = format("1110 0110 1000 1000 0000 0000 00 %s %s", rbh, rah) 
    action = {

    }

// DOC: page 56
op f32_to_ui16(rah: RH, rbh: RH)
    syntax = format("F32TOUI16 %s, %s", rah, rbh)
    image = format("1110 0110 1000 1110 0000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 57
op f32_to_ui16r(rah: RH, rbh: RH)
    syntax = format("F32TOUI16R %s, %s", rah, rbh)
    image = format("1110 0110 1000 1110 1000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 58
op f32_to_ui32(rah: RH, rbh: RH)
    syntax = format("F32TOUI32 %s, %s", rah, rbh)
    image = format("1110 0110 1000 1010 0000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 59
op fracf32(rah: RH, rbh: RH)
    syntax = format("FRACF32 %s, %s", rah, rbh)
    image = format("1110 0110 1111 0001 0000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 60
op i16_to_f32(rah: RH, rbh: RH)
    syntax = format("I16TOF32 %s, %s", rah, rbh)
    image = format("1110 0110 1000 1101 0000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 61
op i16_to_f32_rah_mem16(rah: card(3), loc: LOC16)
    syntax = format("I16TOF32 R%dH, %s", rah, loc)
    image = format("1110 0010 1100 1000 0000 0%3b %s", rah, loc)
    action = { 

    }

// DOC: page 62
op i32_to_f32_rh_mem32(rah: RH, loc: LOC32)
    syntax = format("I32TOF32 %s, %s", rah, loc)
    image = format("1110 0010 1000 1000 0000 0%s %s", rah, loc)
    action = {

    }

// DOC: page 63
op i32_to_f32_tworh(rah: card(3), rbh: card(3))
    syntax = format("I32TOF32 R%dH, R%dH", rah, rbh)
    image = format("1110 0110 1000 1001 0000 0000 00%3b %3b", rbh, rah)
    action = { 

    }

// DOC: page 64
// Alias for parallel multiply and add, page 110
// op macf32_5rh()
//     syntax = format()
//     image = format()
//     action = {

//     }

// DOC: page 66
op macf32_r7h_r6h_and_mov32_rh_mem32(rah: RH, rdh: RH, reh: RH, rfh: RH, loc: LOC32)
    syntax = format("MACF32 R3H, R2H, %s, %s, %s\n||MOV32 %s, %s", rdh, reh, rfh, rah, loc)
    image = format("1110 0011 0011 %s %s %s %s %s", rfh, reh, rdh, rah, loc)
    action = {
        // R3H = R3H + R2H,
        // RdH = ReH * RfH,
        // RaH = [mem32]
    }

// DOC: page 68
op macf32_r7h_r3h_mem32_xar7(loc: LOC32)
    syntax = format("MACF32 R7H, R3H, %s, *XAR7++", loc)
    image = format("1110 0010 0101 0000 0001 1111 %s", loc)
    action = {

    }

// DOC: page 70
// alias for 32 bit floating multiply with parallel add, see page 110
// op macf32_r7h_r6h_threerh(rdh: RH, reh: RH, rfh: RH)
//     syntax = format("MACF32 R7H, R6H, ")
//     image = format()
//     action = {

//     }

// DOC: page 72
op macf32_r3h_r2h_and_mov32_rh_mem32(rdh: RH, reh: RH, rfh: RH, rah: RH, loc: LOC32)
    syntax = format("MACF32 R7H, R6H, %s, %s, %s\n||MOV32 %s, %s", rdh, reh, rfh, rah, loc)
    image = format("1110 0011 1100 %s %s %s %s %s", rfh, reh, rdh, rah, loc)
    action = {

    }

// DOC: page 74
op maxf32_tworh(rah: RH, rbh: RH)
    syntax = format("MAXF32 %s, %s", rah, rbh)
    image = format("1110 0110 1001 0110 0000 0000 00 %s %s", rbh, rah)
    action = {

    }

// DOC: page 75
op maxf32_16bit(rah: RH, imm: card(16))
    syntax = format("MAXF32 %s, #0x%x", rah, imm)
    image = format("1110 1000 0010 0%16b %s", imm, rah)
    action = {

    }

// DOC: page 76
op maxf32_tworh_and_mov32_tworh(rah: RH, rbh: RH, rch: RH, rdh: RH)
    syntax = format("MAXF32 %s, %s\n||MOV32 %s, %s", rah, rbh, rch, rdh)
    image = format("1110 0110 1001 1100 0000 %s %s %s %s", rdh, rch, rbh, rah)
    action = {

    }

// DOC: page 77
op minf32_tworh(rah: RH, rbh: RH)
    syntax = format("MINF32 %s, %s", rah, rbh)
    image = format("1110 0110 1001 0111 0000 0000 00%s %s", rbh, rah)
    action = {

    }

// DOC: page 78
op minf32_16bit(rah: RH, imm: card(16))
    syntax = format("MINF32 %s, #0x%x", rah, imm)
    image = format("1110 1000 0011 0 %16b %s", imm, rah)
    action = {

    }

// DOC: page 79
op minf32_tworh_and_mov32_tworh(rah: RH, rbh: RH, rch: RH, rdh: RH)
    syntax = format("MINF32 %s, %s\n||MOV32 %s, %s", rah, rbh, rch, rdh)
    image = format("1110 0110 1001 1101 0000 %s %s %s %s", rdh, rch, rbh, rah)
    action = {

    }

// DOC: page 80
op mov16(loc: LOC16, rah: RH)
    syntax = format("MOV16 %s, %s", loc, rah)
    image = format("1110 0010 0001 0011 0000 0%s %s", rah, loc)
    action = {

    }

// Takes data from a loc32 address and stores it in the address
// pointed to by by the 16-bit immediate address
// 121 of the possible 65536 addresses are named
// Finding these names and implementing them in the syntax is not necessary for us
// It could be done with generate_elf.py if you wanted
// DOC: page 81, 88, 91, 93, 94, 216, 223, 226, 228, 229, 492, 548
op mov32_locsrc(loc: LOC32, dest: card(16))
    syntax = format("MOV32 0x%04x, %s", dest, loc)
    image = format("1011 1101 %s %16b", loc, dest)
    action = {
        //dest = loc (I think)
    }

// As above, but source and destination are reversed
// DOC: page 82, 83, 87, 96, 97, 217, 218, 222, 231, 232, 491, 549
op mov32_locdest(loc: LOC32, src: card(16))
    syntax = format("MOV32 %s, 0x%04x", loc, src)
    image = format("1011 1111 %s %16b", loc, src)
    action = {
        //loc = src (I think)
    }

// DOC: page 92
op mov32_rah_rbh_cndf(rah: card(3), rbh: card(3), cndf: CNDF)
    syntax = format("MOV32 R%dH, R%dH, %s", rah, rbh, cndf)
    image = format("1110 0110 1100 %s 0000 0000 00%3b %3b", cndf, rbh, rah)
    action = { 

    }

// DOC: page 101
op moviz(imm: card(16), rah: card(3))
    syntax = format("MOVIZ R%d, #0x%x", rah, imm)
    image = format("1110 1000 0000 0 %16b %3b", imm, rah)
    action = {
        //RaH[31:16] = #16FHiHex
        //RaH[15:0] = 0
    }
// DOC: page 104
op movxi(rah: card(3), imm: card(16))
    syntax = format("MOVXI R%dH, #0x%x", rah, imm)
    image = format("1110 1000 0000 1%16b %3b", imm, rah)
    action = {


    }
    
// DOC: page 105
op mpyf32_threerh(rah: card(3), rbh: card(3), rch: card(3))
    syntax = format("MPYF32 R%dH, R%dH, R%dH", rah, rbh, rch)
    image = format("1110 0111 0000 0000 0000 000%3b %3b %3b", rch, rbh, rah)
    action = { 

    }

// DOC: page 106
op mpyf32_tworh_imm(rah: card(3), rbh: card(3), imm: card(16))
    syntax = format("MPYF32 R%dH, #0x%x, R%dH", rah, imm, rbh)
    image = format("1110 1000 01%16b %3b %3b", imm, rbh, rah)
    action = {

    }

// DOC: page 112
op mpyf32_threerh_and_mov32_rah_mem32(rah: card(3), rdh: card(3), reh: card(3), rfh: card(3), loc: LOC32)
    syntax = format("MPYF32 R%dH, R%dH, R%dH\n||MOV32  R%dH, %s", rdh, reh, rfh, rah, loc)
    image = format("1110 0011 0000 %3b %3b %3b %3b %s", rfh, reh, rdh, rah, loc)
    action = {

    }

// DOC: page 116
op negf32(rah: card(3), rbh: card(3), cndf: CNDF)
    syntax = format("NEGF32 R%dH, R%dH, %s", rah, rbh, cndf)
    image = format("1110 0110 1010 %4b 0000 0000 00%3b %3b", cndf, rbh, rah)
    action = { 

    }

//DOC: page 129
op subf32_threerh(rah: card(3), rbh: card(3), rch: card(3))
    syntax = format("SUBF32  R%dH, R%dH, R%dH", rah, rbh, rch)
    image = format("1110 0111 0010 0000 0000 000%3b %3b %3b", rch, rbh, rah)
    action = { 

    }
// DOC: page 130
op subf32_tworh_imm(rah: card(3), rbh: card(3), imm: card(16))
    syntax = format("SUBF32 R%dH, #0x%x, R%dH", rah, imm, rbh)
    image = format("1110 1000 11%16b %3b %3b", imm, rbh, rah)
    action = { 

    }

// DOC: page 141
op zero(rah: card(3))
    syntax = format("ZERO R%d", rah)
    image = format("1110 0101 1001 0%3b", rah)
    action = { 

    }

// DOC: page 219
op mov32_mem32_rah(loc: LOC32, rah: card(3))
    syntax = format("MOV32 %s, R%dH", loc, rah)
    image = format("1110 0010 0000 0011 0000 0%3b %s", rah, loc)
    action = { 

    }

   // DOC: page 224
op mov32_rah_mem32(rah: card(3), loc: LOC32, cndf: CNDF)
    syntax = format("MOV32 R%dH, %s, %s", rah, loc, cndf)
    image = format("1110 0010 1010 %s 0000 0%3b %s", cndf, rah, loc)
    action = { 

    } 

// A small amount of guesswork has been undertaken to determine which flag corresponds to which bit.
// This order both makes sense with what's written in the relevant document and with the test data
// DOC: page 238
op movst0(flags: card(8))
    syntax = format("MOVST0 %s%s%s%s%s%s%s%s",
        if flags<0..0> then format("LVF%s", if flags<1..7>  then "," else "" endif) else "" endif,
        if flags<1..1> then format("LUF%s", if flags<2..7>  then "," else "" endif) else "" endif,
        if flags<2..2> then format("NF%s",  if flags<3..7>  then "," else "" endif) else "" endif,
        if flags<3..3> then format("NI%s",  if flags<4..7>  then "," else "" endif) else "" endif,
        if flags<4..4> then format("ZF%s",  if flags<5..7>  then "," else "" endif) else "" endif,
        if flags<5..5> then format("ZI%s",  if flags<6..7>  then "," else "" endif) else "" endif,
        if flags<6..6> then format("CI%s",  if flags<7..7>  then "," else "" endif) else "" endif,
        if flags<7..7> then "TF" else "" endif)
    image = format("1010 1101 %8b", flags)
    action = { 

    }

// DOC: page 263
op setflg(flags: card(11), value: card(11))
    flagstr = format("%s%s%s%s%s%s%s%s", 
        if flags<0..0> then format("LVF=%b%s", value<0..0>, if flags<1..6> then "," else "" endif) else "" endif,
        if flags<1..1> then format("LUF=%b%s", value<1..1>, if flags<2..6> | flags<9..9> then "," else "" endif) else "" endif,
        if flags<2..2> then format("NF=%b%s",  value<2..2>, if flags<3..6> | flags<9..9> then "," else "" endif) else "" endif,
        if flags<3..3> then format("ZF=%b%s",  value<3..3>, if flags<4..6> | flags<9..9> then "," else "" endif) else "" endif,
        if flags<4..4> then format("NI=%b%s",  value<4..4>, if flags<5..6> | flags<9..9> then "," else "" endif) else "" endif,
        if flags<5..5> then format("ZI=%b%s",  value<5..5>, if flags<6..6> | flags<9..9> then "," else "" endif) else "" endif,
        if flags<6..6> then format("CI=%b%s",  value<6..6>, if flags<9..9> then "," else "" endif) else "" endif,
        if flags<9..9> then format("RNDF32=%b", value<9..9>) else "" endif)
    syntax = format("SETFLG %s", flagstr)
    image = format("1110 0110 00 %11b %11b", flags, value)
    action = {


    }
