/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// MOVL operations
op all_movl =
	  movl_loc32_XAR0
	| movl_loc32_XAR1
	| movl_loc32_XAR2
	| movl_loc32_XAR3
	| movl_loc32_XAR4
	| movl_loc32_XAR5
	| movl_loc32_XAR6
	| movl_loc32_XAR7
	| movl_ACC_loc32
	| movl_loc32_ACC
	| movl_XAR0_loc32
	| movl_XAR1_loc32
	| movl_XAR2_loc32
	| movl_XAR3_loc32
	| movl_XAR4_loc32
	| movl_XAR5_loc32
	| movl_XAR6_loc32
	| movl_XAR7_loc32
	// 32 bit instructions
	| movl_XAR0_22bit
	| movl_XAR1_22bit
	| movl_XAR2_22bit
	| movl_XAR3_22bit
	| movl_XAR4_22bit
	| movl_XAR5_22bit
	| movl_XAR6_22bit
	| movl_XAR7_22bit

op all_other =
	  nop
	| cmpl_ACC_loc32
	| lretr
	| mov_loc16_0
	| mov_ph_loc16
	| subb_ACC
	| subu
	| addb_XARn
	| subb_XARn
	| sb
	| movb_ACC
	| movb_XARn
	| movb_XAR6
	| movb_XAR7
	| movb_AL
	| movb_AH
	| movz_ARn
	| movz_AR6
	| movz_AR7


// DOC: page 137
op addb_XARn(xarn: card(3), imm: card(7))
	syntax = format("ADDB XAR%d, #%d", xarn, imm)
	image = format("1101 1%3b 0%7b", xarn, imm)
	action = { } //XARn = XARn + 0:7bit;

// DOC: page 181
op cmpl_ACC_loc32(src: LOC32)
	syntax = format("CMPL ACC, %s", src.syntax)
	image = format("0000 1111 %s", src.image)
	action = { } //Modify flags on (ACC - [loc32]);

// DOC: page 229
op lretr()
	syntax = "LRETR"
	image = "0000 0000 0000 0110"
	action = {
		// UNTESTED
		PC = RPC;
		SP = SP - 1;
		TMP<31..16> = M32[SP];
		SP = SP - 1;
		TMP<15..0> = M32[SP];
		RPC = TMP<21..0>;
	}

// DOC: page 262
op mov_loc16_0(dest: LOC16)
	syntax = format("MOV %s, #0", dest.syntax)
	image = format("0010 1011 %s", dest.image)
	action = {
		// [loc16] = 0x0000;
	}

// DOC: page 273
op mov_ph_loc16(src: LOC16)
	syntax = format("MOV PH, %s", src.syntax)
	image = format("0010 1111 %s", src.image)
	action = {
		// PH = [loc16];
	}
// DOC: page 281
op movb_ACC(imm: card(8))
	syntax = format("MOVB ACC, %d", imm)
	image = format("0000 0010 %8b", imm)
	action = { } // ACC = 0:8bit;

// DOC: page 283
op movb_AL(imm: card(8))
	syntax = format("MOVB AL, #0x%01x", imm)
	image = format("1001 1010 %8b", imm)
	action = { } // AX = 0:8bit;

// DOC: page 283
op movb_AH(imm: card(8))
	syntax = format("MOVB AH, #0x%01x", imm)
	image = format("1001 1011 %8b", imm)
	action = { } // AX = 0:8bit;

//this format only works for XAR0..5, 6 and 7 must be handled separately
// DOC: page 294
op movb_XARn(xarn: card(3), imm: card(8))
	syntax = format("MOVB XAR%d, #0x%01x", xarn, imm)
	image = format("1101 0%3b %8b", xarn, imm)
	action = { } //XARn = 0:8bit;

// DOC: page 294
op movb_XAR6(imm: card(8))
	syntax = format("MOVB XAR6, #0x%01x", imm)
	image = format("1011 1110 %8b", imm)
	action = { } //XAR6 = 0:8bit;

// DOC: page 294
op movb_XAR7(imm: card(8))
	syntax = format("MOVB XAR7, #0x%01x", imm)
	image = format("1011 0110 %8b", imm)
	action = { } //XAR7 = 0:8bit;


// DOC: page 294
op movb_XAR4(imm: card(8))
	syntax = format("MOVB XAR4, #0x%01x", imm)
	image = format("1101 0100 %8b", imm)
	action = { }// XAR4 = 0:8bit;

// DOC: page 298
op movl_ACC_loc32(src: LOC32)
	syntax = format("MOVL ACC, %s", src.syntax)
	image = format("0000 0110 %s", src.image)
	action = { } // ACC = [loc32];

// DOC: page 300
op movl_loc32_ACC(src: LOC32)
	syntax = format("MOVL %s, ACC", src.syntax)
	image = format("0001 1110 %s", src.image)
	action = { } // [loc32] = ACC;

// DOC: page 304
macro MakeMovlLoc32Xarn(xarn, fmt) = \
	syntax = format("MOVL %s, %s", dest.syntax, xarn)\
	image = format(fmt, dest.image)\
	action = { } // [loc32] = XARn;
op movl_loc32_XAR0(dest: LOC32) MakeMovlLoc32Xarn("XAR0", "0011 1010 %s")
op movl_loc32_XAR1(dest: LOC32) MakeMovlLoc32Xarn("XAR1", "1011 0010 %s")
op movl_loc32_XAR2(dest: LOC32) MakeMovlLoc32Xarn("XAR2", "1010 1010 %s")
op movl_loc32_XAR3(dest: LOC32) MakeMovlLoc32Xarn("XAR3", "1010 0010 %s")
op movl_loc32_XAR4(dest: LOC32) MakeMovlLoc32Xarn("XAR4", "1010 1000 %s")
op movl_loc32_XAR5(dest: LOC32) MakeMovlLoc32Xarn("XAR5", "1010 0000 %s")
op movl_loc32_XAR6(dest: LOC32) MakeMovlLoc32Xarn("XAR6", "1100 0010 %s")
op movl_loc32_XAR7(dest: LOC32) MakeMovlLoc32Xarn("XAR7", "1100 0011 %s")

// DOC: page 308
macro MakeMovlXarnLoc32(xarn, fmt) = \
	syntax = format("MOVL %s, %s", xarn, src.syntax)\
	image = format(fmt, src.image)\
	action = { } // XARn = [loc32];
op movl_XAR0_loc32(src: LOC32) MakeMovlXarnLoc32("XAR0", "1000 1110 %s")
op movl_XAR1_loc32(src: LOC32) MakeMovlXarnLoc32("XAR1", "1000 1011 %s")
op movl_XAR2_loc32(src: LOC32) MakeMovlXarnLoc32("XAR2", "1000 0110 %s")
op movl_XAR3_loc32(src: LOC32) MakeMovlXarnLoc32("XAR3", "1000 0010 %s")
op movl_XAR4_loc32(src: LOC32) MakeMovlXarnLoc32("XAR4", "1000 1010 %s")
op movl_XAR5_loc32(src: LOC32) MakeMovlXarnLoc32("XAR5", "1000 0011 %s")
op movl_XAR6_loc32(src: LOC32) MakeMovlXarnLoc32("XAR6", "1100 0100 %s")
op movl_XAR7_loc32(src: LOC32) MakeMovlXarnLoc32("XAR7", "1100 0101 %s")

// DOC: page 309
macro MakeMovlXarn22bit(xarn, fmt) = \
	syntax = format("MOVL %s, #0x%06x", xarn, imm)\
	image = format(fmt, imm)\
	action = { } // XARn = 0:22bit;
op movl_XAR0_22bit(imm: card(22)) MakeMovlXarn22bit("XAR0", "1000 1101 00 %22b")
op movl_XAR1_22bit(imm: card(22)) MakeMovlXarn22bit("XAR1", "1000 1101 01 %22b")
op movl_XAR2_22bit(imm: card(22)) MakeMovlXarn22bit("XAR2", "1000 1101 10 %22b")
op movl_XAR3_22bit(imm: card(22)) MakeMovlXarn22bit("XAR3", "1000 1101 11 %22b")
op movl_XAR4_22bit(imm: card(22)) MakeMovlXarn22bit("XAR4", "1000 1111 00 %22b")
op movl_XAR5_22bit(imm: card(22)) MakeMovlXarn22bit("XAR5", "1000 1111 01 %22b")
op movl_XAR6_22bit(imm: card(22)) MakeMovlXarn22bit("XAR6", "0111 0110 10 %22b")
op movl_XAR7_22bit(imm: card(22)) MakeMovlXarn22bit("XAR7", "0111 0110 11 %22b")

// DOC: page 318
op movz_ARn(xarn: card(3), src: LOC16)
	syntax = format("MOVZ AR%d, %s", xarn, src)
	image = format("0101 1%3b %s", xarn, src)
	action = { } //ARn = [loc16]; ARnH = 0;
op movz_AR6(src: LOC16)
	syntax = format("MOVZ AR6, %s", src)
	image = format("1000 1000 %s", src)
	action = { } // AR6 = [loc16]; AR6H = 0;
op movz_AR7(src: LOC16)
	syntax = format("MOVZ AR7 %s", src)
	image = format("1000 0000 %s", src)
	action = { } // AR7 = [loc16]; AR7H = 0;

// DOC: page 339
op nop(arpn: card(8))
	syntax =
		if arpn == 0x00 then // simple NOP
			"NOP"
		else
			// NOT IMPLEMENTED
			"NOP ???, ???"
	endif
	image = format("0111 0111 %8b", arpn)
	action = { } // ;	

// DOC: page 399
op sb(off: int(8), cond: COND)
	syntax = format("SB %d, %s", off, cond.syntax)
	image = format("0110 %s %8b", cond.image, off)
	action = {
		// If (COND = true) PC = PC + signed 8-bit offset;
		// If (COND = false) PC = PC + 1;
	}

// DOC: page 420
op subb_ACC(src: card(8))
	syntax = format("SUBB ACC, #%d", src)
	image = format("0001 1001 %8b", src)
	action = { } //ACC = ACC - 0:8bit;

// DOC: page 422
// catches dc02, ADDB must be implemented
op subb_XARn(xarn: card(3), imm: card(7))
	syntax = format("SUBB XAR%d, #%d", xarn, imm)
	image = format("1101 1%3b 1 %7b", xarn, imm)
	action = { } // XARn = XARn − 0:7bit;
	
// DOC: page 433
op subu(src: LOC16)
	syntax = format("SUBU ACC, %s", src)
	image = format("0000 0001 %s", src)
	action = { } //ACC = ACC − 0:[loc16];
